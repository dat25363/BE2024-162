
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model brands
 * 
 */
export type brands = $Result.DefaultSelection<Prisma.$brandsPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model userGroups
 * 
 */
export type userGroups = $Result.DefaultSelection<Prisma.$userGroupsPayload>
/**
 * Model permissions
 * 
 */
export type permissions = $Result.DefaultSelection<Prisma.$permissionsPayload>
/**
 * Model groupPermission
 * 
 */
export type groupPermission = $Result.DefaultSelection<Prisma.$groupPermissionPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model routes
 * 
 */
export type routes = $Result.DefaultSelection<Prisma.$routesPayload>
/**
 * Model routePermission
 * 
 */
export type routePermission = $Result.DefaultSelection<Prisma.$routePermissionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Brands
 * const brands = await prisma.brands.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Brands
   * const brands = await prisma.brands.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.brands`: Exposes CRUD operations for the **brands** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brands.findMany()
    * ```
    */
  get brands(): Prisma.brandsDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.userGroups`: Exposes CRUD operations for the **userGroups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserGroups
    * const userGroups = await prisma.userGroups.findMany()
    * ```
    */
  get userGroups(): Prisma.userGroupsDelegate<ExtArgs>;

  /**
   * `prisma.permissions`: Exposes CRUD operations for the **permissions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permissions.findMany()
    * ```
    */
  get permissions(): Prisma.permissionsDelegate<ExtArgs>;

  /**
   * `prisma.groupPermission`: Exposes CRUD operations for the **groupPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupPermissions
    * const groupPermissions = await prisma.groupPermission.findMany()
    * ```
    */
  get groupPermission(): Prisma.groupPermissionDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.routes`: Exposes CRUD operations for the **routes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Routes
    * const routes = await prisma.routes.findMany()
    * ```
    */
  get routes(): Prisma.routesDelegate<ExtArgs>;

  /**
   * `prisma.routePermission`: Exposes CRUD operations for the **routePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoutePermissions
    * const routePermissions = await prisma.routePermission.findMany()
    * ```
    */
  get routePermission(): Prisma.routePermissionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    brands: 'brands',
    products: 'products',
    userGroups: 'userGroups',
    permissions: 'permissions',
    groupPermission: 'groupPermission',
    users: 'users',
    routes: 'routes',
    routePermission: 'routePermission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "brands" | "products" | "userGroups" | "permissions" | "groupPermission" | "users" | "routes" | "routePermission"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      brands: {
        payload: Prisma.$brandsPayload<ExtArgs>
        fields: Prisma.brandsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.brandsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.brandsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>
          }
          findFirst: {
            args: Prisma.brandsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.brandsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>
          }
          findMany: {
            args: Prisma.brandsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>[]
          }
          create: {
            args: Prisma.brandsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>
          }
          createMany: {
            args: Prisma.brandsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.brandsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>
          }
          update: {
            args: Prisma.brandsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>
          }
          deleteMany: {
            args: Prisma.brandsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.brandsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.brandsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$brandsPayload>
          }
          aggregate: {
            args: Prisma.BrandsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrands>
          }
          groupBy: {
            args: Prisma.brandsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandsGroupByOutputType>[]
          }
          count: {
            args: Prisma.brandsCountArgs<ExtArgs>
            result: $Utils.Optional<BrandsCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      userGroups: {
        payload: Prisma.$userGroupsPayload<ExtArgs>
        fields: Prisma.userGroupsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userGroupsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userGroupsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>
          }
          findFirst: {
            args: Prisma.userGroupsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userGroupsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>
          }
          findMany: {
            args: Prisma.userGroupsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>[]
          }
          create: {
            args: Prisma.userGroupsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>
          }
          createMany: {
            args: Prisma.userGroupsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userGroupsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>
          }
          update: {
            args: Prisma.userGroupsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>
          }
          deleteMany: {
            args: Prisma.userGroupsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userGroupsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userGroupsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userGroupsPayload>
          }
          aggregate: {
            args: Prisma.UserGroupsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserGroups>
          }
          groupBy: {
            args: Prisma.userGroupsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupsGroupByOutputType>[]
          }
          count: {
            args: Prisma.userGroupsCountArgs<ExtArgs>
            result: $Utils.Optional<UserGroupsCountAggregateOutputType> | number
          }
        }
      }
      permissions: {
        payload: Prisma.$permissionsPayload<ExtArgs>
        fields: Prisma.permissionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.permissionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.permissionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          findFirst: {
            args: Prisma.permissionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.permissionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          findMany: {
            args: Prisma.permissionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>[]
          }
          create: {
            args: Prisma.permissionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          createMany: {
            args: Prisma.permissionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.permissionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          update: {
            args: Prisma.permissionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          deleteMany: {
            args: Prisma.permissionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.permissionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.permissionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          aggregate: {
            args: Prisma.PermissionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissions>
          }
          groupBy: {
            args: Prisma.permissionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.permissionsCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionsCountAggregateOutputType> | number
          }
        }
      }
      groupPermission: {
        payload: Prisma.$groupPermissionPayload<ExtArgs>
        fields: Prisma.groupPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.groupPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.groupPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>
          }
          findFirst: {
            args: Prisma.groupPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.groupPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>
          }
          findMany: {
            args: Prisma.groupPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>[]
          }
          create: {
            args: Prisma.groupPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>
          }
          createMany: {
            args: Prisma.groupPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.groupPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>
          }
          update: {
            args: Prisma.groupPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>
          }
          deleteMany: {
            args: Prisma.groupPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.groupPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.groupPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$groupPermissionPayload>
          }
          aggregate: {
            args: Prisma.GroupPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGroupPermission>
          }
          groupBy: {
            args: Prisma.groupPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<GroupPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.groupPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<GroupPermissionCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      routes: {
        payload: Prisma.$routesPayload<ExtArgs>
        fields: Prisma.routesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.routesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.routesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>
          }
          findFirst: {
            args: Prisma.routesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.routesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>
          }
          findMany: {
            args: Prisma.routesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>[]
          }
          create: {
            args: Prisma.routesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>
          }
          createMany: {
            args: Prisma.routesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.routesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>
          }
          update: {
            args: Prisma.routesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>
          }
          deleteMany: {
            args: Prisma.routesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.routesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.routesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routesPayload>
          }
          aggregate: {
            args: Prisma.RoutesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutes>
          }
          groupBy: {
            args: Prisma.routesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutesGroupByOutputType>[]
          }
          count: {
            args: Prisma.routesCountArgs<ExtArgs>
            result: $Utils.Optional<RoutesCountAggregateOutputType> | number
          }
        }
      }
      routePermission: {
        payload: Prisma.$routePermissionPayload<ExtArgs>
        fields: Prisma.routePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.routePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.routePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>
          }
          findFirst: {
            args: Prisma.routePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.routePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>
          }
          findMany: {
            args: Prisma.routePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>[]
          }
          create: {
            args: Prisma.routePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>
          }
          createMany: {
            args: Prisma.routePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.routePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>
          }
          update: {
            args: Prisma.routePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>
          }
          deleteMany: {
            args: Prisma.routePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.routePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.routePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$routePermissionPayload>
          }
          aggregate: {
            args: Prisma.RoutePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoutePermission>
          }
          groupBy: {
            args: Prisma.routePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoutePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.routePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RoutePermissionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BrandsCountOutputType
   */

  export type BrandsCountOutputType = {
    products: number
  }

  export type BrandsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | BrandsCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandsCountOutputType
     */
    select?: BrandsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandsCountOutputType without action
   */
  export type BrandsCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }


  /**
   * Count Type UserGroupsCountOutputType
   */

  export type UserGroupsCountOutputType = {
    permissions: number
    user: number
  }

  export type UserGroupsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | UserGroupsCountOutputTypeCountPermissionsArgs
    user?: boolean | UserGroupsCountOutputTypeCountUserArgs
  }

  // Custom InputTypes
  /**
   * UserGroupsCountOutputType without action
   */
  export type UserGroupsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserGroupsCountOutputType
     */
    select?: UserGroupsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserGroupsCountOutputType without action
   */
  export type UserGroupsCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupPermissionWhereInput
  }

  /**
   * UserGroupsCountOutputType without action
   */
  export type UserGroupsCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * Count Type PermissionsCountOutputType
   */

  export type PermissionsCountOutputType = {
    userGroups: number
    routes: number
  }

  export type PermissionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userGroups?: boolean | PermissionsCountOutputTypeCountUserGroupsArgs
    routes?: boolean | PermissionsCountOutputTypeCountRoutesArgs
  }

  // Custom InputTypes
  /**
   * PermissionsCountOutputType without action
   */
  export type PermissionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionsCountOutputType
     */
    select?: PermissionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionsCountOutputType without action
   */
  export type PermissionsCountOutputTypeCountUserGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupPermissionWhereInput
  }

  /**
   * PermissionsCountOutputType without action
   */
  export type PermissionsCountOutputTypeCountRoutesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: routePermissionWhereInput
  }


  /**
   * Count Type RoutesCountOutputType
   */

  export type RoutesCountOutputType = {
    permissions: number
  }

  export type RoutesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | RoutesCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * RoutesCountOutputType without action
   */
  export type RoutesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoutesCountOutputType
     */
    select?: RoutesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoutesCountOutputType without action
   */
  export type RoutesCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: routePermissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model brands
   */

  export type AggregateBrands = {
    _count: BrandsCountAggregateOutputType | null
    _avg: BrandsAvgAggregateOutputType | null
    _sum: BrandsSumAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  export type BrandsAvgAggregateOutputType = {
    id: number | null
  }

  export type BrandsSumAggregateOutputType = {
    id: number | null
  }

  export type BrandsMinAggregateOutputType = {
    id: number | null
    brand_name: string | null
  }

  export type BrandsMaxAggregateOutputType = {
    id: number | null
    brand_name: string | null
  }

  export type BrandsCountAggregateOutputType = {
    id: number
    brand_name: number
    _all: number
  }


  export type BrandsAvgAggregateInputType = {
    id?: true
  }

  export type BrandsSumAggregateInputType = {
    id?: true
  }

  export type BrandsMinAggregateInputType = {
    id?: true
    brand_name?: true
  }

  export type BrandsMaxAggregateInputType = {
    id?: true
    brand_name?: true
  }

  export type BrandsCountAggregateInputType = {
    id?: true
    brand_name?: true
    _all?: true
  }

  export type BrandsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which brands to aggregate.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned brands
    **/
    _count?: true | BrandsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BrandsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BrandsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandsMaxAggregateInputType
  }

  export type GetBrandsAggregateType<T extends BrandsAggregateArgs> = {
        [P in keyof T & keyof AggregateBrands]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrands[P]>
      : GetScalarType<T[P], AggregateBrands[P]>
  }




  export type brandsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: brandsWhereInput
    orderBy?: brandsOrderByWithAggregationInput | brandsOrderByWithAggregationInput[]
    by: BrandsScalarFieldEnum[] | BrandsScalarFieldEnum
    having?: brandsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandsCountAggregateInputType | true
    _avg?: BrandsAvgAggregateInputType
    _sum?: BrandsSumAggregateInputType
    _min?: BrandsMinAggregateInputType
    _max?: BrandsMaxAggregateInputType
  }

  export type BrandsGroupByOutputType = {
    id: number
    brand_name: string
    _count: BrandsCountAggregateOutputType | null
    _avg: BrandsAvgAggregateOutputType | null
    _sum: BrandsSumAggregateOutputType | null
    _min: BrandsMinAggregateOutputType | null
    _max: BrandsMaxAggregateOutputType | null
  }

  type GetBrandsGroupByPayload<T extends brandsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandsGroupByOutputType[P]>
            : GetScalarType<T[P], BrandsGroupByOutputType[P]>
        }
      >
    >


  export type brandsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    brand_name?: boolean
    products?: boolean | brands$productsArgs<ExtArgs>
    _count?: boolean | BrandsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brands"]>


  export type brandsSelectScalar = {
    id?: boolean
    brand_name?: boolean
  }

  export type brandsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | brands$productsArgs<ExtArgs>
    _count?: boolean | BrandsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $brandsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "brands"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      brand_name: string
    }, ExtArgs["result"]["brands"]>
    composites: {}
  }

  type brandsGetPayload<S extends boolean | null | undefined | brandsDefaultArgs> = $Result.GetResult<Prisma.$brandsPayload, S>

  type brandsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<brandsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BrandsCountAggregateInputType | true
    }

  export interface brandsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['brands'], meta: { name: 'brands' } }
    /**
     * Find zero or one Brands that matches the filter.
     * @param {brandsFindUniqueArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends brandsFindUniqueArgs>(args: SelectSubset<T, brandsFindUniqueArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Brands that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {brandsFindUniqueOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends brandsFindUniqueOrThrowArgs>(args: SelectSubset<T, brandsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindFirstArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends brandsFindFirstArgs>(args?: SelectSubset<T, brandsFindFirstArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Brands that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindFirstOrThrowArgs} args - Arguments to find a Brands
     * @example
     * // Get one Brands
     * const brands = await prisma.brands.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends brandsFindFirstOrThrowArgs>(args?: SelectSubset<T, brandsFindFirstOrThrowArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brands.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brands.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandsWithIdOnly = await prisma.brands.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends brandsFindManyArgs>(args?: SelectSubset<T, brandsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Brands.
     * @param {brandsCreateArgs} args - Arguments to create a Brands.
     * @example
     * // Create one Brands
     * const Brands = await prisma.brands.create({
     *   data: {
     *     // ... data to create a Brands
     *   }
     * })
     * 
     */
    create<T extends brandsCreateArgs>(args: SelectSubset<T, brandsCreateArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Brands.
     * @param {brandsCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brands = await prisma.brands.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends brandsCreateManyArgs>(args?: SelectSubset<T, brandsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brands.
     * @param {brandsDeleteArgs} args - Arguments to delete one Brands.
     * @example
     * // Delete one Brands
     * const Brands = await prisma.brands.delete({
     *   where: {
     *     // ... filter to delete one Brands
     *   }
     * })
     * 
     */
    delete<T extends brandsDeleteArgs>(args: SelectSubset<T, brandsDeleteArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Brands.
     * @param {brandsUpdateArgs} args - Arguments to update one Brands.
     * @example
     * // Update one Brands
     * const brands = await prisma.brands.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends brandsUpdateArgs>(args: SelectSubset<T, brandsUpdateArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Brands.
     * @param {brandsDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brands.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends brandsDeleteManyArgs>(args?: SelectSubset<T, brandsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brands = await prisma.brands.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends brandsUpdateManyArgs>(args: SelectSubset<T, brandsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brands.
     * @param {brandsUpsertArgs} args - Arguments to update or create a Brands.
     * @example
     * // Update or create a Brands
     * const brands = await prisma.brands.upsert({
     *   create: {
     *     // ... data to create a Brands
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brands we want to update
     *   }
     * })
     */
    upsert<T extends brandsUpsertArgs>(args: SelectSubset<T, brandsUpsertArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brands.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends brandsCountArgs>(
      args?: Subset<T, brandsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandsAggregateArgs>(args: Subset<T, BrandsAggregateArgs>): Prisma.PrismaPromise<GetBrandsAggregateType<T>>

    /**
     * Group by Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {brandsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends brandsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: brandsGroupByArgs['orderBy'] }
        : { orderBy?: brandsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, brandsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the brands model
   */
  readonly fields: brandsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for brands.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__brandsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends brands$productsArgs<ExtArgs> = {}>(args?: Subset<T, brands$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the brands model
   */ 
  interface brandsFieldRefs {
    readonly id: FieldRef<"brands", 'Int'>
    readonly brand_name: FieldRef<"brands", 'String'>
  }
    

  // Custom InputTypes
  /**
   * brands findUnique
   */
  export type brandsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where: brandsWhereUniqueInput
  }

  /**
   * brands findUniqueOrThrow
   */
  export type brandsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where: brandsWhereUniqueInput
  }

  /**
   * brands findFirst
   */
  export type brandsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brands.
     */
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }

  /**
   * brands findFirstOrThrow
   */
  export type brandsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of brands.
     */
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }

  /**
   * brands findMany
   */
  export type brandsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter, which brands to fetch.
     */
    where?: brandsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of brands to fetch.
     */
    orderBy?: brandsOrderByWithRelationInput | brandsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing brands.
     */
    cursor?: brandsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` brands.
     */
    skip?: number
    distinct?: BrandsScalarFieldEnum | BrandsScalarFieldEnum[]
  }

  /**
   * brands create
   */
  export type brandsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The data needed to create a brands.
     */
    data: XOR<brandsCreateInput, brandsUncheckedCreateInput>
  }

  /**
   * brands createMany
   */
  export type brandsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many brands.
     */
    data: brandsCreateManyInput | brandsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * brands update
   */
  export type brandsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The data needed to update a brands.
     */
    data: XOR<brandsUpdateInput, brandsUncheckedUpdateInput>
    /**
     * Choose, which brands to update.
     */
    where: brandsWhereUniqueInput
  }

  /**
   * brands updateMany
   */
  export type brandsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update brands.
     */
    data: XOR<brandsUpdateManyMutationInput, brandsUncheckedUpdateManyInput>
    /**
     * Filter which brands to update
     */
    where?: brandsWhereInput
  }

  /**
   * brands upsert
   */
  export type brandsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * The filter to search for the brands to update in case it exists.
     */
    where: brandsWhereUniqueInput
    /**
     * In case the brands found by the `where` argument doesn't exist, create a new brands with this data.
     */
    create: XOR<brandsCreateInput, brandsUncheckedCreateInput>
    /**
     * In case the brands was found with the provided `where` argument, update it with this data.
     */
    update: XOR<brandsUpdateInput, brandsUncheckedUpdateInput>
  }

  /**
   * brands delete
   */
  export type brandsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
    /**
     * Filter which brands to delete.
     */
    where: brandsWhereUniqueInput
  }

  /**
   * brands deleteMany
   */
  export type brandsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which brands to delete
     */
    where?: brandsWhereInput
  }

  /**
   * brands.products
   */
  export type brands$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * brands without action
   */
  export type brandsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the brands
     */
    select?: brandsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: brandsInclude<ExtArgs> | null
  }


  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    id: number | null
    release_year: number | null
    price: number | null
    brand_id: number | null
  }

  export type ProductsSumAggregateOutputType = {
    id: number | null
    release_year: number | null
    price: number | null
    brand_id: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: number | null
    product_name: string | null
    img: string | null
    city: string | null
    release_year: number | null
    p_condition: string | null
    delivery_status: string | null
    isSold: boolean | null
    price: number | null
    brand_id: number | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: number | null
    product_name: string | null
    img: string | null
    city: string | null
    release_year: number | null
    p_condition: string | null
    delivery_status: string | null
    isSold: boolean | null
    price: number | null
    brand_id: number | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    product_name: number
    img: number
    city: number
    release_year: number
    p_condition: number
    delivery_status: number
    isSold: number
    price: number
    brand_id: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    id?: true
    release_year?: true
    price?: true
    brand_id?: true
  }

  export type ProductsSumAggregateInputType = {
    id?: true
    release_year?: true
    price?: true
    brand_id?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    product_name?: true
    img?: true
    city?: true
    release_year?: true
    p_condition?: true
    delivery_status?: true
    isSold?: true
    price?: true
    brand_id?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    product_name?: true
    img?: true
    city?: true
    release_year?: true
    p_condition?: true
    delivery_status?: true
    isSold?: true
    price?: true
    brand_id?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    product_name?: true
    img?: true
    city?: true
    release_year?: true
    p_condition?: true
    delivery_status?: true
    isSold?: true
    price?: true
    brand_id?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: number
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold: boolean
    price: number
    brand_id: number
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_name?: boolean
    img?: boolean
    city?: boolean
    release_year?: boolean
    p_condition?: boolean
    delivery_status?: boolean
    isSold?: boolean
    price?: boolean
    brand_id?: boolean
    brand?: boolean | brandsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>


  export type productsSelectScalar = {
    id?: boolean
    product_name?: boolean
    img?: boolean
    city?: boolean
    release_year?: boolean
    p_condition?: boolean
    delivery_status?: boolean
    isSold?: boolean
    price?: boolean
    brand_id?: boolean
  }

  export type productsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    brand?: boolean | brandsDefaultArgs<ExtArgs>
  }

  export type $productsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      brand: Prisma.$brandsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_name: string
      img: string
      city: string
      release_year: number
      p_condition: string
      delivery_status: string
      isSold: boolean
      price: number
      brand_id: number
    }, ExtArgs["result"]["products"]>
    composites: {}
  }

  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends productsFindUniqueArgs>(args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs>(args: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends productsFindFirstArgs>(args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs>(args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends productsFindManyArgs>(args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
     */
    create<T extends productsCreateArgs>(args: SelectSubset<T, productsCreateArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {productsCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const products = await prisma.products.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends productsCreateManyArgs>(args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
     */
    delete<T extends productsDeleteArgs>(args: SelectSubset<T, productsDeleteArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends productsUpdateArgs>(args: SelectSubset<T, productsUpdateArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends productsDeleteManyArgs>(args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends productsUpdateManyArgs>(args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
     */
    upsert<T extends productsUpsertArgs>(args: SelectSubset<T, productsUpsertArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    brand<T extends brandsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, brandsDefaultArgs<ExtArgs>>): Prisma__brandsClient<$Result.GetResult<Prisma.$brandsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'Int'>
    readonly product_name: FieldRef<"products", 'String'>
    readonly img: FieldRef<"products", 'String'>
    readonly city: FieldRef<"products", 'String'>
    readonly release_year: FieldRef<"products", 'Int'>
    readonly p_condition: FieldRef<"products", 'String'>
    readonly delivery_status: FieldRef<"products", 'String'>
    readonly isSold: FieldRef<"products", 'Boolean'>
    readonly price: FieldRef<"products", 'Int'>
    readonly brand_id: FieldRef<"products", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }

  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }

  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }

  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }

  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }

  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }

  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: productsInclude<ExtArgs> | null
  }


  /**
   * Model userGroups
   */

  export type AggregateUserGroups = {
    _count: UserGroupsCountAggregateOutputType | null
    _avg: UserGroupsAvgAggregateOutputType | null
    _sum: UserGroupsSumAggregateOutputType | null
    _min: UserGroupsMinAggregateOutputType | null
    _max: UserGroupsMaxAggregateOutputType | null
  }

  export type UserGroupsAvgAggregateOutputType = {
    id: number | null
  }

  export type UserGroupsSumAggregateOutputType = {
    id: number | null
  }

  export type UserGroupsMinAggregateOutputType = {
    id: number | null
    group_name: string | null
  }

  export type UserGroupsMaxAggregateOutputType = {
    id: number | null
    group_name: string | null
  }

  export type UserGroupsCountAggregateOutputType = {
    id: number
    group_name: number
    _all: number
  }


  export type UserGroupsAvgAggregateInputType = {
    id?: true
  }

  export type UserGroupsSumAggregateInputType = {
    id?: true
  }

  export type UserGroupsMinAggregateInputType = {
    id?: true
    group_name?: true
  }

  export type UserGroupsMaxAggregateInputType = {
    id?: true
    group_name?: true
  }

  export type UserGroupsCountAggregateInputType = {
    id?: true
    group_name?: true
    _all?: true
  }

  export type UserGroupsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userGroups to aggregate.
     */
    where?: userGroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userGroups to fetch.
     */
    orderBy?: userGroupsOrderByWithRelationInput | userGroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userGroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userGroups
    **/
    _count?: true | UserGroupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserGroupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserGroupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserGroupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserGroupsMaxAggregateInputType
  }

  export type GetUserGroupsAggregateType<T extends UserGroupsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserGroups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserGroups[P]>
      : GetScalarType<T[P], AggregateUserGroups[P]>
  }




  export type userGroupsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userGroupsWhereInput
    orderBy?: userGroupsOrderByWithAggregationInput | userGroupsOrderByWithAggregationInput[]
    by: UserGroupsScalarFieldEnum[] | UserGroupsScalarFieldEnum
    having?: userGroupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserGroupsCountAggregateInputType | true
    _avg?: UserGroupsAvgAggregateInputType
    _sum?: UserGroupsSumAggregateInputType
    _min?: UserGroupsMinAggregateInputType
    _max?: UserGroupsMaxAggregateInputType
  }

  export type UserGroupsGroupByOutputType = {
    id: number
    group_name: string
    _count: UserGroupsCountAggregateOutputType | null
    _avg: UserGroupsAvgAggregateOutputType | null
    _sum: UserGroupsSumAggregateOutputType | null
    _min: UserGroupsMinAggregateOutputType | null
    _max: UserGroupsMaxAggregateOutputType | null
  }

  type GetUserGroupsGroupByPayload<T extends userGroupsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupsGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupsGroupByOutputType[P]>
        }
      >
    >


  export type userGroupsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    group_name?: boolean
    permissions?: boolean | userGroups$permissionsArgs<ExtArgs>
    user?: boolean | userGroups$userArgs<ExtArgs>
    _count?: boolean | UserGroupsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userGroups"]>


  export type userGroupsSelectScalar = {
    id?: boolean
    group_name?: boolean
  }

  export type userGroupsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | userGroups$permissionsArgs<ExtArgs>
    user?: boolean | userGroups$userArgs<ExtArgs>
    _count?: boolean | UserGroupsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userGroupsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "userGroups"
    objects: {
      permissions: Prisma.$groupPermissionPayload<ExtArgs>[]
      user: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      group_name: string
    }, ExtArgs["result"]["userGroups"]>
    composites: {}
  }

  type userGroupsGetPayload<S extends boolean | null | undefined | userGroupsDefaultArgs> = $Result.GetResult<Prisma.$userGroupsPayload, S>

  type userGroupsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userGroupsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserGroupsCountAggregateInputType | true
    }

  export interface userGroupsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userGroups'], meta: { name: 'userGroups' } }
    /**
     * Find zero or one UserGroups that matches the filter.
     * @param {userGroupsFindUniqueArgs} args - Arguments to find a UserGroups
     * @example
     * // Get one UserGroups
     * const userGroups = await prisma.userGroups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userGroupsFindUniqueArgs>(args: SelectSubset<T, userGroupsFindUniqueArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserGroups that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userGroupsFindUniqueOrThrowArgs} args - Arguments to find a UserGroups
     * @example
     * // Get one UserGroups
     * const userGroups = await prisma.userGroups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userGroupsFindUniqueOrThrowArgs>(args: SelectSubset<T, userGroupsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupsFindFirstArgs} args - Arguments to find a UserGroups
     * @example
     * // Get one UserGroups
     * const userGroups = await prisma.userGroups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userGroupsFindFirstArgs>(args?: SelectSubset<T, userGroupsFindFirstArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserGroups that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupsFindFirstOrThrowArgs} args - Arguments to find a UserGroups
     * @example
     * // Get one UserGroups
     * const userGroups = await prisma.userGroups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userGroupsFindFirstOrThrowArgs>(args?: SelectSubset<T, userGroupsFindFirstOrThrowArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserGroups
     * const userGroups = await prisma.userGroups.findMany()
     * 
     * // Get first 10 UserGroups
     * const userGroups = await prisma.userGroups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userGroupsWithIdOnly = await prisma.userGroups.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userGroupsFindManyArgs>(args?: SelectSubset<T, userGroupsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserGroups.
     * @param {userGroupsCreateArgs} args - Arguments to create a UserGroups.
     * @example
     * // Create one UserGroups
     * const UserGroups = await prisma.userGroups.create({
     *   data: {
     *     // ... data to create a UserGroups
     *   }
     * })
     * 
     */
    create<T extends userGroupsCreateArgs>(args: SelectSubset<T, userGroupsCreateArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserGroups.
     * @param {userGroupsCreateManyArgs} args - Arguments to create many UserGroups.
     * @example
     * // Create many UserGroups
     * const userGroups = await prisma.userGroups.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userGroupsCreateManyArgs>(args?: SelectSubset<T, userGroupsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserGroups.
     * @param {userGroupsDeleteArgs} args - Arguments to delete one UserGroups.
     * @example
     * // Delete one UserGroups
     * const UserGroups = await prisma.userGroups.delete({
     *   where: {
     *     // ... filter to delete one UserGroups
     *   }
     * })
     * 
     */
    delete<T extends userGroupsDeleteArgs>(args: SelectSubset<T, userGroupsDeleteArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserGroups.
     * @param {userGroupsUpdateArgs} args - Arguments to update one UserGroups.
     * @example
     * // Update one UserGroups
     * const userGroups = await prisma.userGroups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userGroupsUpdateArgs>(args: SelectSubset<T, userGroupsUpdateArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserGroups.
     * @param {userGroupsDeleteManyArgs} args - Arguments to filter UserGroups to delete.
     * @example
     * // Delete a few UserGroups
     * const { count } = await prisma.userGroups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userGroupsDeleteManyArgs>(args?: SelectSubset<T, userGroupsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserGroups
     * const userGroups = await prisma.userGroups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userGroupsUpdateManyArgs>(args: SelectSubset<T, userGroupsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserGroups.
     * @param {userGroupsUpsertArgs} args - Arguments to update or create a UserGroups.
     * @example
     * // Update or create a UserGroups
     * const userGroups = await prisma.userGroups.upsert({
     *   create: {
     *     // ... data to create a UserGroups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserGroups we want to update
     *   }
     * })
     */
    upsert<T extends userGroupsUpsertArgs>(args: SelectSubset<T, userGroupsUpsertArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupsCountArgs} args - Arguments to filter UserGroups to count.
     * @example
     * // Count the number of UserGroups
     * const count = await prisma.userGroups.count({
     *   where: {
     *     // ... the filter for the UserGroups we want to count
     *   }
     * })
    **/
    count<T extends userGroupsCountArgs>(
      args?: Subset<T, userGroupsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserGroupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserGroupsAggregateArgs>(args: Subset<T, UserGroupsAggregateArgs>): Prisma.PrismaPromise<GetUserGroupsAggregateType<T>>

    /**
     * Group by UserGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupsGroupByArgs['orderBy'] }
        : { orderBy?: userGroupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userGroups model
   */
  readonly fields: userGroupsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userGroups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userGroupsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends userGroups$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, userGroups$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends userGroups$userArgs<ExtArgs> = {}>(args?: Subset<T, userGroups$userArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the userGroups model
   */ 
  interface userGroupsFieldRefs {
    readonly id: FieldRef<"userGroups", 'Int'>
    readonly group_name: FieldRef<"userGroups", 'String'>
  }
    

  // Custom InputTypes
  /**
   * userGroups findUnique
   */
  export type userGroupsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * Filter, which userGroups to fetch.
     */
    where: userGroupsWhereUniqueInput
  }

  /**
   * userGroups findUniqueOrThrow
   */
  export type userGroupsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * Filter, which userGroups to fetch.
     */
    where: userGroupsWhereUniqueInput
  }

  /**
   * userGroups findFirst
   */
  export type userGroupsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * Filter, which userGroups to fetch.
     */
    where?: userGroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userGroups to fetch.
     */
    orderBy?: userGroupsOrderByWithRelationInput | userGroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userGroups.
     */
    cursor?: userGroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userGroups.
     */
    distinct?: UserGroupsScalarFieldEnum | UserGroupsScalarFieldEnum[]
  }

  /**
   * userGroups findFirstOrThrow
   */
  export type userGroupsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * Filter, which userGroups to fetch.
     */
    where?: userGroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userGroups to fetch.
     */
    orderBy?: userGroupsOrderByWithRelationInput | userGroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userGroups.
     */
    cursor?: userGroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userGroups.
     */
    distinct?: UserGroupsScalarFieldEnum | UserGroupsScalarFieldEnum[]
  }

  /**
   * userGroups findMany
   */
  export type userGroupsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * Filter, which userGroups to fetch.
     */
    where?: userGroupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userGroups to fetch.
     */
    orderBy?: userGroupsOrderByWithRelationInput | userGroupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userGroups.
     */
    cursor?: userGroupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userGroups.
     */
    skip?: number
    distinct?: UserGroupsScalarFieldEnum | UserGroupsScalarFieldEnum[]
  }

  /**
   * userGroups create
   */
  export type userGroupsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * The data needed to create a userGroups.
     */
    data: XOR<userGroupsCreateInput, userGroupsUncheckedCreateInput>
  }

  /**
   * userGroups createMany
   */
  export type userGroupsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userGroups.
     */
    data: userGroupsCreateManyInput | userGroupsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * userGroups update
   */
  export type userGroupsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * The data needed to update a userGroups.
     */
    data: XOR<userGroupsUpdateInput, userGroupsUncheckedUpdateInput>
    /**
     * Choose, which userGroups to update.
     */
    where: userGroupsWhereUniqueInput
  }

  /**
   * userGroups updateMany
   */
  export type userGroupsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userGroups.
     */
    data: XOR<userGroupsUpdateManyMutationInput, userGroupsUncheckedUpdateManyInput>
    /**
     * Filter which userGroups to update
     */
    where?: userGroupsWhereInput
  }

  /**
   * userGroups upsert
   */
  export type userGroupsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * The filter to search for the userGroups to update in case it exists.
     */
    where: userGroupsWhereUniqueInput
    /**
     * In case the userGroups found by the `where` argument doesn't exist, create a new userGroups with this data.
     */
    create: XOR<userGroupsCreateInput, userGroupsUncheckedCreateInput>
    /**
     * In case the userGroups was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userGroupsUpdateInput, userGroupsUncheckedUpdateInput>
  }

  /**
   * userGroups delete
   */
  export type userGroupsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
    /**
     * Filter which userGroups to delete.
     */
    where: userGroupsWhereUniqueInput
  }

  /**
   * userGroups deleteMany
   */
  export type userGroupsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which userGroups to delete
     */
    where?: userGroupsWhereInput
  }

  /**
   * userGroups.permissions
   */
  export type userGroups$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    where?: groupPermissionWhereInput
    orderBy?: groupPermissionOrderByWithRelationInput | groupPermissionOrderByWithRelationInput[]
    cursor?: groupPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupPermissionScalarFieldEnum | GroupPermissionScalarFieldEnum[]
  }

  /**
   * userGroups.user
   */
  export type userGroups$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * userGroups without action
   */
  export type userGroupsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userGroups
     */
    select?: userGroupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userGroupsInclude<ExtArgs> | null
  }


  /**
   * Model permissions
   */

  export type AggregatePermissions = {
    _count: PermissionsCountAggregateOutputType | null
    _avg: PermissionsAvgAggregateOutputType | null
    _sum: PermissionsSumAggregateOutputType | null
    _min: PermissionsMinAggregateOutputType | null
    _max: PermissionsMaxAggregateOutputType | null
  }

  export type PermissionsAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionsSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionsMinAggregateOutputType = {
    id: number | null
    permission_name: string | null
  }

  export type PermissionsMaxAggregateOutputType = {
    id: number | null
    permission_name: string | null
  }

  export type PermissionsCountAggregateOutputType = {
    id: number
    permission_name: number
    _all: number
  }


  export type PermissionsAvgAggregateInputType = {
    id?: true
  }

  export type PermissionsSumAggregateInputType = {
    id?: true
  }

  export type PermissionsMinAggregateInputType = {
    id?: true
    permission_name?: true
  }

  export type PermissionsMaxAggregateInputType = {
    id?: true
    permission_name?: true
  }

  export type PermissionsCountAggregateInputType = {
    id?: true
    permission_name?: true
    _all?: true
  }

  export type PermissionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to aggregate.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned permissions
    **/
    _count?: true | PermissionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionsMaxAggregateInputType
  }

  export type GetPermissionsAggregateType<T extends PermissionsAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissions[P]>
      : GetScalarType<T[P], AggregatePermissions[P]>
  }




  export type permissionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionsWhereInput
    orderBy?: permissionsOrderByWithAggregationInput | permissionsOrderByWithAggregationInput[]
    by: PermissionsScalarFieldEnum[] | PermissionsScalarFieldEnum
    having?: permissionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionsCountAggregateInputType | true
    _avg?: PermissionsAvgAggregateInputType
    _sum?: PermissionsSumAggregateInputType
    _min?: PermissionsMinAggregateInputType
    _max?: PermissionsMaxAggregateInputType
  }

  export type PermissionsGroupByOutputType = {
    id: number
    permission_name: string
    _count: PermissionsCountAggregateOutputType | null
    _avg: PermissionsAvgAggregateOutputType | null
    _sum: PermissionsSumAggregateOutputType | null
    _min: PermissionsMinAggregateOutputType | null
    _max: PermissionsMaxAggregateOutputType | null
  }

  type GetPermissionsGroupByPayload<T extends permissionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionsGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionsGroupByOutputType[P]>
        }
      >
    >


  export type permissionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    permission_name?: boolean
    userGroups?: boolean | permissions$userGroupsArgs<ExtArgs>
    routes?: boolean | permissions$routesArgs<ExtArgs>
    _count?: boolean | PermissionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permissions"]>


  export type permissionsSelectScalar = {
    id?: boolean
    permission_name?: boolean
  }

  export type permissionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userGroups?: boolean | permissions$userGroupsArgs<ExtArgs>
    routes?: boolean | permissions$routesArgs<ExtArgs>
    _count?: boolean | PermissionsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $permissionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "permissions"
    objects: {
      userGroups: Prisma.$groupPermissionPayload<ExtArgs>[]
      routes: Prisma.$routePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      permission_name: string
    }, ExtArgs["result"]["permissions"]>
    composites: {}
  }

  type permissionsGetPayload<S extends boolean | null | undefined | permissionsDefaultArgs> = $Result.GetResult<Prisma.$permissionsPayload, S>

  type permissionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<permissionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionsCountAggregateInputType | true
    }

  export interface permissionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['permissions'], meta: { name: 'permissions' } }
    /**
     * Find zero or one Permissions that matches the filter.
     * @param {permissionsFindUniqueArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends permissionsFindUniqueArgs>(args: SelectSubset<T, permissionsFindUniqueArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permissions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {permissionsFindUniqueOrThrowArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends permissionsFindUniqueOrThrowArgs>(args: SelectSubset<T, permissionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindFirstArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends permissionsFindFirstArgs>(args?: SelectSubset<T, permissionsFindFirstArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permissions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindFirstOrThrowArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends permissionsFindFirstOrThrowArgs>(args?: SelectSubset<T, permissionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permissions.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permissions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionsWithIdOnly = await prisma.permissions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends permissionsFindManyArgs>(args?: SelectSubset<T, permissionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permissions.
     * @param {permissionsCreateArgs} args - Arguments to create a Permissions.
     * @example
     * // Create one Permissions
     * const Permissions = await prisma.permissions.create({
     *   data: {
     *     // ... data to create a Permissions
     *   }
     * })
     * 
     */
    create<T extends permissionsCreateArgs>(args: SelectSubset<T, permissionsCreateArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {permissionsCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permissions = await prisma.permissions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends permissionsCreateManyArgs>(args?: SelectSubset<T, permissionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permissions.
     * @param {permissionsDeleteArgs} args - Arguments to delete one Permissions.
     * @example
     * // Delete one Permissions
     * const Permissions = await prisma.permissions.delete({
     *   where: {
     *     // ... filter to delete one Permissions
     *   }
     * })
     * 
     */
    delete<T extends permissionsDeleteArgs>(args: SelectSubset<T, permissionsDeleteArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permissions.
     * @param {permissionsUpdateArgs} args - Arguments to update one Permissions.
     * @example
     * // Update one Permissions
     * const permissions = await prisma.permissions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends permissionsUpdateArgs>(args: SelectSubset<T, permissionsUpdateArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {permissionsDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permissions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends permissionsDeleteManyArgs>(args?: SelectSubset<T, permissionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permissions = await prisma.permissions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends permissionsUpdateManyArgs>(args: SelectSubset<T, permissionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permissions.
     * @param {permissionsUpsertArgs} args - Arguments to update or create a Permissions.
     * @example
     * // Update or create a Permissions
     * const permissions = await prisma.permissions.upsert({
     *   create: {
     *     // ... data to create a Permissions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permissions we want to update
     *   }
     * })
     */
    upsert<T extends permissionsUpsertArgs>(args: SelectSubset<T, permissionsUpsertArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permissions.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends permissionsCountArgs>(
      args?: Subset<T, permissionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionsAggregateArgs>(args: Subset<T, PermissionsAggregateArgs>): Prisma.PrismaPromise<GetPermissionsAggregateType<T>>

    /**
     * Group by Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends permissionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: permissionsGroupByArgs['orderBy'] }
        : { orderBy?: permissionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, permissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the permissions model
   */
  readonly fields: permissionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for permissions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__permissionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userGroups<T extends permissions$userGroupsArgs<ExtArgs> = {}>(args?: Subset<T, permissions$userGroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findMany"> | Null>
    routes<T extends permissions$routesArgs<ExtArgs> = {}>(args?: Subset<T, permissions$routesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the permissions model
   */ 
  interface permissionsFieldRefs {
    readonly id: FieldRef<"permissions", 'Int'>
    readonly permission_name: FieldRef<"permissions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * permissions findUnique
   */
  export type permissionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions findUniqueOrThrow
   */
  export type permissionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions findFirst
   */
  export type permissionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions findFirstOrThrow
   */
  export type permissionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions findMany
   */
  export type permissionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions create
   */
  export type permissionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * The data needed to create a permissions.
     */
    data: XOR<permissionsCreateInput, permissionsUncheckedCreateInput>
  }

  /**
   * permissions createMany
   */
  export type permissionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many permissions.
     */
    data: permissionsCreateManyInput | permissionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * permissions update
   */
  export type permissionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * The data needed to update a permissions.
     */
    data: XOR<permissionsUpdateInput, permissionsUncheckedUpdateInput>
    /**
     * Choose, which permissions to update.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions updateMany
   */
  export type permissionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update permissions.
     */
    data: XOR<permissionsUpdateManyMutationInput, permissionsUncheckedUpdateManyInput>
    /**
     * Filter which permissions to update
     */
    where?: permissionsWhereInput
  }

  /**
   * permissions upsert
   */
  export type permissionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * The filter to search for the permissions to update in case it exists.
     */
    where: permissionsWhereUniqueInput
    /**
     * In case the permissions found by the `where` argument doesn't exist, create a new permissions with this data.
     */
    create: XOR<permissionsCreateInput, permissionsUncheckedCreateInput>
    /**
     * In case the permissions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<permissionsUpdateInput, permissionsUncheckedUpdateInput>
  }

  /**
   * permissions delete
   */
  export type permissionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
    /**
     * Filter which permissions to delete.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions deleteMany
   */
  export type permissionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to delete
     */
    where?: permissionsWhereInput
  }

  /**
   * permissions.userGroups
   */
  export type permissions$userGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    where?: groupPermissionWhereInput
    orderBy?: groupPermissionOrderByWithRelationInput | groupPermissionOrderByWithRelationInput[]
    cursor?: groupPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupPermissionScalarFieldEnum | GroupPermissionScalarFieldEnum[]
  }

  /**
   * permissions.routes
   */
  export type permissions$routesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    where?: routePermissionWhereInput
    orderBy?: routePermissionOrderByWithRelationInput | routePermissionOrderByWithRelationInput[]
    cursor?: routePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutePermissionScalarFieldEnum | RoutePermissionScalarFieldEnum[]
  }

  /**
   * permissions without action
   */
  export type permissionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: permissionsInclude<ExtArgs> | null
  }


  /**
   * Model groupPermission
   */

  export type AggregateGroupPermission = {
    _count: GroupPermissionCountAggregateOutputType | null
    _avg: GroupPermissionAvgAggregateOutputType | null
    _sum: GroupPermissionSumAggregateOutputType | null
    _min: GroupPermissionMinAggregateOutputType | null
    _max: GroupPermissionMaxAggregateOutputType | null
  }

  export type GroupPermissionAvgAggregateOutputType = {
    userGroupId: number | null
    permissionId: number | null
  }

  export type GroupPermissionSumAggregateOutputType = {
    userGroupId: number | null
    permissionId: number | null
  }

  export type GroupPermissionMinAggregateOutputType = {
    userGroupId: number | null
    permissionId: number | null
  }

  export type GroupPermissionMaxAggregateOutputType = {
    userGroupId: number | null
    permissionId: number | null
  }

  export type GroupPermissionCountAggregateOutputType = {
    userGroupId: number
    permissionId: number
    _all: number
  }


  export type GroupPermissionAvgAggregateInputType = {
    userGroupId?: true
    permissionId?: true
  }

  export type GroupPermissionSumAggregateInputType = {
    userGroupId?: true
    permissionId?: true
  }

  export type GroupPermissionMinAggregateInputType = {
    userGroupId?: true
    permissionId?: true
  }

  export type GroupPermissionMaxAggregateInputType = {
    userGroupId?: true
    permissionId?: true
  }

  export type GroupPermissionCountAggregateInputType = {
    userGroupId?: true
    permissionId?: true
    _all?: true
  }

  export type GroupPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which groupPermission to aggregate.
     */
    where?: groupPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupPermissions to fetch.
     */
    orderBy?: groupPermissionOrderByWithRelationInput | groupPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: groupPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned groupPermissions
    **/
    _count?: true | GroupPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupPermissionMaxAggregateInputType
  }

  export type GetGroupPermissionAggregateType<T extends GroupPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupPermission[P]>
      : GetScalarType<T[P], AggregateGroupPermission[P]>
  }




  export type groupPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: groupPermissionWhereInput
    orderBy?: groupPermissionOrderByWithAggregationInput | groupPermissionOrderByWithAggregationInput[]
    by: GroupPermissionScalarFieldEnum[] | GroupPermissionScalarFieldEnum
    having?: groupPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupPermissionCountAggregateInputType | true
    _avg?: GroupPermissionAvgAggregateInputType
    _sum?: GroupPermissionSumAggregateInputType
    _min?: GroupPermissionMinAggregateInputType
    _max?: GroupPermissionMaxAggregateInputType
  }

  export type GroupPermissionGroupByOutputType = {
    userGroupId: number
    permissionId: number
    _count: GroupPermissionCountAggregateOutputType | null
    _avg: GroupPermissionAvgAggregateOutputType | null
    _sum: GroupPermissionSumAggregateOutputType | null
    _min: GroupPermissionMinAggregateOutputType | null
    _max: GroupPermissionMaxAggregateOutputType | null
  }

  type GetGroupPermissionGroupByPayload<T extends groupPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], GroupPermissionGroupByOutputType[P]>
        }
      >
    >


  export type groupPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userGroupId?: boolean
    permissionId?: boolean
    userGroup?: boolean | userGroupsDefaultArgs<ExtArgs>
    permission?: boolean | permissionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupPermission"]>


  export type groupPermissionSelectScalar = {
    userGroupId?: boolean
    permissionId?: boolean
  }

  export type groupPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userGroup?: boolean | userGroupsDefaultArgs<ExtArgs>
    permission?: boolean | permissionsDefaultArgs<ExtArgs>
  }

  export type $groupPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "groupPermission"
    objects: {
      userGroup: Prisma.$userGroupsPayload<ExtArgs>
      permission: Prisma.$permissionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userGroupId: number
      permissionId: number
    }, ExtArgs["result"]["groupPermission"]>
    composites: {}
  }

  type groupPermissionGetPayload<S extends boolean | null | undefined | groupPermissionDefaultArgs> = $Result.GetResult<Prisma.$groupPermissionPayload, S>

  type groupPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<groupPermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupPermissionCountAggregateInputType | true
    }

  export interface groupPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['groupPermission'], meta: { name: 'groupPermission' } }
    /**
     * Find zero or one GroupPermission that matches the filter.
     * @param {groupPermissionFindUniqueArgs} args - Arguments to find a GroupPermission
     * @example
     * // Get one GroupPermission
     * const groupPermission = await prisma.groupPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends groupPermissionFindUniqueArgs>(args: SelectSubset<T, groupPermissionFindUniqueArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one GroupPermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {groupPermissionFindUniqueOrThrowArgs} args - Arguments to find a GroupPermission
     * @example
     * // Get one GroupPermission
     * const groupPermission = await prisma.groupPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends groupPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, groupPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first GroupPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupPermissionFindFirstArgs} args - Arguments to find a GroupPermission
     * @example
     * // Get one GroupPermission
     * const groupPermission = await prisma.groupPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends groupPermissionFindFirstArgs>(args?: SelectSubset<T, groupPermissionFindFirstArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first GroupPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupPermissionFindFirstOrThrowArgs} args - Arguments to find a GroupPermission
     * @example
     * // Get one GroupPermission
     * const groupPermission = await prisma.groupPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends groupPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, groupPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more GroupPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupPermissions
     * const groupPermissions = await prisma.groupPermission.findMany()
     * 
     * // Get first 10 GroupPermissions
     * const groupPermissions = await prisma.groupPermission.findMany({ take: 10 })
     * 
     * // Only select the `userGroupId`
     * const groupPermissionWithUserGroupIdOnly = await prisma.groupPermission.findMany({ select: { userGroupId: true } })
     * 
     */
    findMany<T extends groupPermissionFindManyArgs>(args?: SelectSubset<T, groupPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a GroupPermission.
     * @param {groupPermissionCreateArgs} args - Arguments to create a GroupPermission.
     * @example
     * // Create one GroupPermission
     * const GroupPermission = await prisma.groupPermission.create({
     *   data: {
     *     // ... data to create a GroupPermission
     *   }
     * })
     * 
     */
    create<T extends groupPermissionCreateArgs>(args: SelectSubset<T, groupPermissionCreateArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many GroupPermissions.
     * @param {groupPermissionCreateManyArgs} args - Arguments to create many GroupPermissions.
     * @example
     * // Create many GroupPermissions
     * const groupPermission = await prisma.groupPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends groupPermissionCreateManyArgs>(args?: SelectSubset<T, groupPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GroupPermission.
     * @param {groupPermissionDeleteArgs} args - Arguments to delete one GroupPermission.
     * @example
     * // Delete one GroupPermission
     * const GroupPermission = await prisma.groupPermission.delete({
     *   where: {
     *     // ... filter to delete one GroupPermission
     *   }
     * })
     * 
     */
    delete<T extends groupPermissionDeleteArgs>(args: SelectSubset<T, groupPermissionDeleteArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one GroupPermission.
     * @param {groupPermissionUpdateArgs} args - Arguments to update one GroupPermission.
     * @example
     * // Update one GroupPermission
     * const groupPermission = await prisma.groupPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends groupPermissionUpdateArgs>(args: SelectSubset<T, groupPermissionUpdateArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more GroupPermissions.
     * @param {groupPermissionDeleteManyArgs} args - Arguments to filter GroupPermissions to delete.
     * @example
     * // Delete a few GroupPermissions
     * const { count } = await prisma.groupPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends groupPermissionDeleteManyArgs>(args?: SelectSubset<T, groupPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupPermissions
     * const groupPermission = await prisma.groupPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends groupPermissionUpdateManyArgs>(args: SelectSubset<T, groupPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupPermission.
     * @param {groupPermissionUpsertArgs} args - Arguments to update or create a GroupPermission.
     * @example
     * // Update or create a GroupPermission
     * const groupPermission = await prisma.groupPermission.upsert({
     *   create: {
     *     // ... data to create a GroupPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupPermission we want to update
     *   }
     * })
     */
    upsert<T extends groupPermissionUpsertArgs>(args: SelectSubset<T, groupPermissionUpsertArgs<ExtArgs>>): Prisma__groupPermissionClient<$Result.GetResult<Prisma.$groupPermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of GroupPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupPermissionCountArgs} args - Arguments to filter GroupPermissions to count.
     * @example
     * // Count the number of GroupPermissions
     * const count = await prisma.groupPermission.count({
     *   where: {
     *     // ... the filter for the GroupPermissions we want to count
     *   }
     * })
    **/
    count<T extends groupPermissionCountArgs>(
      args?: Subset<T, groupPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupPermissionAggregateArgs>(args: Subset<T, GroupPermissionAggregateArgs>): Prisma.PrismaPromise<GetGroupPermissionAggregateType<T>>

    /**
     * Group by GroupPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {groupPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends groupPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: groupPermissionGroupByArgs['orderBy'] }
        : { orderBy?: groupPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, groupPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the groupPermission model
   */
  readonly fields: groupPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for groupPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__groupPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userGroup<T extends userGroupsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userGroupsDefaultArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends permissionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, permissionsDefaultArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the groupPermission model
   */ 
  interface groupPermissionFieldRefs {
    readonly userGroupId: FieldRef<"groupPermission", 'Int'>
    readonly permissionId: FieldRef<"groupPermission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * groupPermission findUnique
   */
  export type groupPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * Filter, which groupPermission to fetch.
     */
    where: groupPermissionWhereUniqueInput
  }

  /**
   * groupPermission findUniqueOrThrow
   */
  export type groupPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * Filter, which groupPermission to fetch.
     */
    where: groupPermissionWhereUniqueInput
  }

  /**
   * groupPermission findFirst
   */
  export type groupPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * Filter, which groupPermission to fetch.
     */
    where?: groupPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupPermissions to fetch.
     */
    orderBy?: groupPermissionOrderByWithRelationInput | groupPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groupPermissions.
     */
    cursor?: groupPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groupPermissions.
     */
    distinct?: GroupPermissionScalarFieldEnum | GroupPermissionScalarFieldEnum[]
  }

  /**
   * groupPermission findFirstOrThrow
   */
  export type groupPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * Filter, which groupPermission to fetch.
     */
    where?: groupPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupPermissions to fetch.
     */
    orderBy?: groupPermissionOrderByWithRelationInput | groupPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for groupPermissions.
     */
    cursor?: groupPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of groupPermissions.
     */
    distinct?: GroupPermissionScalarFieldEnum | GroupPermissionScalarFieldEnum[]
  }

  /**
   * groupPermission findMany
   */
  export type groupPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * Filter, which groupPermissions to fetch.
     */
    where?: groupPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of groupPermissions to fetch.
     */
    orderBy?: groupPermissionOrderByWithRelationInput | groupPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing groupPermissions.
     */
    cursor?: groupPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` groupPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` groupPermissions.
     */
    skip?: number
    distinct?: GroupPermissionScalarFieldEnum | GroupPermissionScalarFieldEnum[]
  }

  /**
   * groupPermission create
   */
  export type groupPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a groupPermission.
     */
    data: XOR<groupPermissionCreateInput, groupPermissionUncheckedCreateInput>
  }

  /**
   * groupPermission createMany
   */
  export type groupPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many groupPermissions.
     */
    data: groupPermissionCreateManyInput | groupPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * groupPermission update
   */
  export type groupPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a groupPermission.
     */
    data: XOR<groupPermissionUpdateInput, groupPermissionUncheckedUpdateInput>
    /**
     * Choose, which groupPermission to update.
     */
    where: groupPermissionWhereUniqueInput
  }

  /**
   * groupPermission updateMany
   */
  export type groupPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update groupPermissions.
     */
    data: XOR<groupPermissionUpdateManyMutationInput, groupPermissionUncheckedUpdateManyInput>
    /**
     * Filter which groupPermissions to update
     */
    where?: groupPermissionWhereInput
  }

  /**
   * groupPermission upsert
   */
  export type groupPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the groupPermission to update in case it exists.
     */
    where: groupPermissionWhereUniqueInput
    /**
     * In case the groupPermission found by the `where` argument doesn't exist, create a new groupPermission with this data.
     */
    create: XOR<groupPermissionCreateInput, groupPermissionUncheckedCreateInput>
    /**
     * In case the groupPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<groupPermissionUpdateInput, groupPermissionUncheckedUpdateInput>
  }

  /**
   * groupPermission delete
   */
  export type groupPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
    /**
     * Filter which groupPermission to delete.
     */
    where: groupPermissionWhereUniqueInput
  }

  /**
   * groupPermission deleteMany
   */
  export type groupPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which groupPermissions to delete
     */
    where?: groupPermissionWhereInput
  }

  /**
   * groupPermission without action
   */
  export type groupPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the groupPermission
     */
    select?: groupPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: groupPermissionInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    userGroup_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    userGroup_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    phone: string | null
    pass: string | null
    userGroup_id: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    phone: string | null
    pass: string | null
    userGroup_id: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    phone: number
    pass: number
    userGroup_id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    userGroup_id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    userGroup_id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    phone?: true
    pass?: true
    userGroup_id?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    phone?: true
    pass?: true
    userGroup_id?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    phone?: true
    pass?: true
    userGroup_id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    phone: string
    pass: string
    userGroup_id: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phone?: boolean
    pass?: boolean
    userGroup_id?: boolean
    userGroup?: boolean | userGroupsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type usersSelectScalar = {
    id?: boolean
    phone?: boolean
    pass?: boolean
    userGroup_id?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userGroup?: boolean | userGroupsDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      userGroup: Prisma.$userGroupsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      phone: string
      pass: string
      userGroup_id: number
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userGroup<T extends userGroupsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userGroupsDefaultArgs<ExtArgs>>): Prisma__userGroupsClient<$Result.GetResult<Prisma.$userGroupsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly phone: FieldRef<"users", 'String'>
    readonly pass: FieldRef<"users", 'String'>
    readonly userGroup_id: FieldRef<"users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model routes
   */

  export type AggregateRoutes = {
    _count: RoutesCountAggregateOutputType | null
    _avg: RoutesAvgAggregateOutputType | null
    _sum: RoutesSumAggregateOutputType | null
    _min: RoutesMinAggregateOutputType | null
    _max: RoutesMaxAggregateOutputType | null
  }

  export type RoutesAvgAggregateOutputType = {
    id: number | null
  }

  export type RoutesSumAggregateOutputType = {
    id: number | null
  }

  export type RoutesMinAggregateOutputType = {
    id: number | null
    route_name: string | null
  }

  export type RoutesMaxAggregateOutputType = {
    id: number | null
    route_name: string | null
  }

  export type RoutesCountAggregateOutputType = {
    id: number
    route_name: number
    _all: number
  }


  export type RoutesAvgAggregateInputType = {
    id?: true
  }

  export type RoutesSumAggregateInputType = {
    id?: true
  }

  export type RoutesMinAggregateInputType = {
    id?: true
    route_name?: true
  }

  export type RoutesMaxAggregateInputType = {
    id?: true
    route_name?: true
  }

  export type RoutesCountAggregateInputType = {
    id?: true
    route_name?: true
    _all?: true
  }

  export type RoutesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which routes to aggregate.
     */
    where?: routesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routes to fetch.
     */
    orderBy?: routesOrderByWithRelationInput | routesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: routesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned routes
    **/
    _count?: true | RoutesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoutesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoutesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutesMaxAggregateInputType
  }

  export type GetRoutesAggregateType<T extends RoutesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutes[P]>
      : GetScalarType<T[P], AggregateRoutes[P]>
  }




  export type routesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: routesWhereInput
    orderBy?: routesOrderByWithAggregationInput | routesOrderByWithAggregationInput[]
    by: RoutesScalarFieldEnum[] | RoutesScalarFieldEnum
    having?: routesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutesCountAggregateInputType | true
    _avg?: RoutesAvgAggregateInputType
    _sum?: RoutesSumAggregateInputType
    _min?: RoutesMinAggregateInputType
    _max?: RoutesMaxAggregateInputType
  }

  export type RoutesGroupByOutputType = {
    id: number
    route_name: string
    _count: RoutesCountAggregateOutputType | null
    _avg: RoutesAvgAggregateOutputType | null
    _sum: RoutesSumAggregateOutputType | null
    _min: RoutesMinAggregateOutputType | null
    _max: RoutesMaxAggregateOutputType | null
  }

  type GetRoutesGroupByPayload<T extends routesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutesGroupByOutputType[P]>
            : GetScalarType<T[P], RoutesGroupByOutputType[P]>
        }
      >
    >


  export type routesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    route_name?: boolean
    permissions?: boolean | routes$permissionsArgs<ExtArgs>
    _count?: boolean | RoutesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routes"]>


  export type routesSelectScalar = {
    id?: boolean
    route_name?: boolean
  }

  export type routesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | routes$permissionsArgs<ExtArgs>
    _count?: boolean | RoutesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $routesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "routes"
    objects: {
      permissions: Prisma.$routePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      route_name: string
    }, ExtArgs["result"]["routes"]>
    composites: {}
  }

  type routesGetPayload<S extends boolean | null | undefined | routesDefaultArgs> = $Result.GetResult<Prisma.$routesPayload, S>

  type routesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<routesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoutesCountAggregateInputType | true
    }

  export interface routesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['routes'], meta: { name: 'routes' } }
    /**
     * Find zero or one Routes that matches the filter.
     * @param {routesFindUniqueArgs} args - Arguments to find a Routes
     * @example
     * // Get one Routes
     * const routes = await prisma.routes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends routesFindUniqueArgs>(args: SelectSubset<T, routesFindUniqueArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Routes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {routesFindUniqueOrThrowArgs} args - Arguments to find a Routes
     * @example
     * // Get one Routes
     * const routes = await prisma.routes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends routesFindUniqueOrThrowArgs>(args: SelectSubset<T, routesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Routes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routesFindFirstArgs} args - Arguments to find a Routes
     * @example
     * // Get one Routes
     * const routes = await prisma.routes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends routesFindFirstArgs>(args?: SelectSubset<T, routesFindFirstArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Routes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routesFindFirstOrThrowArgs} args - Arguments to find a Routes
     * @example
     * // Get one Routes
     * const routes = await prisma.routes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends routesFindFirstOrThrowArgs>(args?: SelectSubset<T, routesFindFirstOrThrowArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Routes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Routes
     * const routes = await prisma.routes.findMany()
     * 
     * // Get first 10 Routes
     * const routes = await prisma.routes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const routesWithIdOnly = await prisma.routes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends routesFindManyArgs>(args?: SelectSubset<T, routesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Routes.
     * @param {routesCreateArgs} args - Arguments to create a Routes.
     * @example
     * // Create one Routes
     * const Routes = await prisma.routes.create({
     *   data: {
     *     // ... data to create a Routes
     *   }
     * })
     * 
     */
    create<T extends routesCreateArgs>(args: SelectSubset<T, routesCreateArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Routes.
     * @param {routesCreateManyArgs} args - Arguments to create many Routes.
     * @example
     * // Create many Routes
     * const routes = await prisma.routes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends routesCreateManyArgs>(args?: SelectSubset<T, routesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Routes.
     * @param {routesDeleteArgs} args - Arguments to delete one Routes.
     * @example
     * // Delete one Routes
     * const Routes = await prisma.routes.delete({
     *   where: {
     *     // ... filter to delete one Routes
     *   }
     * })
     * 
     */
    delete<T extends routesDeleteArgs>(args: SelectSubset<T, routesDeleteArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Routes.
     * @param {routesUpdateArgs} args - Arguments to update one Routes.
     * @example
     * // Update one Routes
     * const routes = await prisma.routes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends routesUpdateArgs>(args: SelectSubset<T, routesUpdateArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Routes.
     * @param {routesDeleteManyArgs} args - Arguments to filter Routes to delete.
     * @example
     * // Delete a few Routes
     * const { count } = await prisma.routes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends routesDeleteManyArgs>(args?: SelectSubset<T, routesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Routes
     * const routes = await prisma.routes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends routesUpdateManyArgs>(args: SelectSubset<T, routesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Routes.
     * @param {routesUpsertArgs} args - Arguments to update or create a Routes.
     * @example
     * // Update or create a Routes
     * const routes = await prisma.routes.upsert({
     *   create: {
     *     // ... data to create a Routes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Routes we want to update
     *   }
     * })
     */
    upsert<T extends routesUpsertArgs>(args: SelectSubset<T, routesUpsertArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routesCountArgs} args - Arguments to filter Routes to count.
     * @example
     * // Count the number of Routes
     * const count = await prisma.routes.count({
     *   where: {
     *     // ... the filter for the Routes we want to count
     *   }
     * })
    **/
    count<T extends routesCountArgs>(
      args?: Subset<T, routesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutesAggregateArgs>(args: Subset<T, RoutesAggregateArgs>): Prisma.PrismaPromise<GetRoutesAggregateType<T>>

    /**
     * Group by Routes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends routesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: routesGroupByArgs['orderBy'] }
        : { orderBy?: routesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, routesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the routes model
   */
  readonly fields: routesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for routes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__routesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends routes$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, routes$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the routes model
   */ 
  interface routesFieldRefs {
    readonly id: FieldRef<"routes", 'Int'>
    readonly route_name: FieldRef<"routes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * routes findUnique
   */
  export type routesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * Filter, which routes to fetch.
     */
    where: routesWhereUniqueInput
  }

  /**
   * routes findUniqueOrThrow
   */
  export type routesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * Filter, which routes to fetch.
     */
    where: routesWhereUniqueInput
  }

  /**
   * routes findFirst
   */
  export type routesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * Filter, which routes to fetch.
     */
    where?: routesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routes to fetch.
     */
    orderBy?: routesOrderByWithRelationInput | routesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for routes.
     */
    cursor?: routesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of routes.
     */
    distinct?: RoutesScalarFieldEnum | RoutesScalarFieldEnum[]
  }

  /**
   * routes findFirstOrThrow
   */
  export type routesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * Filter, which routes to fetch.
     */
    where?: routesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routes to fetch.
     */
    orderBy?: routesOrderByWithRelationInput | routesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for routes.
     */
    cursor?: routesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of routes.
     */
    distinct?: RoutesScalarFieldEnum | RoutesScalarFieldEnum[]
  }

  /**
   * routes findMany
   */
  export type routesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * Filter, which routes to fetch.
     */
    where?: routesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routes to fetch.
     */
    orderBy?: routesOrderByWithRelationInput | routesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing routes.
     */
    cursor?: routesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routes.
     */
    skip?: number
    distinct?: RoutesScalarFieldEnum | RoutesScalarFieldEnum[]
  }

  /**
   * routes create
   */
  export type routesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * The data needed to create a routes.
     */
    data: XOR<routesCreateInput, routesUncheckedCreateInput>
  }

  /**
   * routes createMany
   */
  export type routesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many routes.
     */
    data: routesCreateManyInput | routesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * routes update
   */
  export type routesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * The data needed to update a routes.
     */
    data: XOR<routesUpdateInput, routesUncheckedUpdateInput>
    /**
     * Choose, which routes to update.
     */
    where: routesWhereUniqueInput
  }

  /**
   * routes updateMany
   */
  export type routesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update routes.
     */
    data: XOR<routesUpdateManyMutationInput, routesUncheckedUpdateManyInput>
    /**
     * Filter which routes to update
     */
    where?: routesWhereInput
  }

  /**
   * routes upsert
   */
  export type routesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * The filter to search for the routes to update in case it exists.
     */
    where: routesWhereUniqueInput
    /**
     * In case the routes found by the `where` argument doesn't exist, create a new routes with this data.
     */
    create: XOR<routesCreateInput, routesUncheckedCreateInput>
    /**
     * In case the routes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<routesUpdateInput, routesUncheckedUpdateInput>
  }

  /**
   * routes delete
   */
  export type routesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
    /**
     * Filter which routes to delete.
     */
    where: routesWhereUniqueInput
  }

  /**
   * routes deleteMany
   */
  export type routesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which routes to delete
     */
    where?: routesWhereInput
  }

  /**
   * routes.permissions
   */
  export type routes$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    where?: routePermissionWhereInput
    orderBy?: routePermissionOrderByWithRelationInput | routePermissionOrderByWithRelationInput[]
    cursor?: routePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoutePermissionScalarFieldEnum | RoutePermissionScalarFieldEnum[]
  }

  /**
   * routes without action
   */
  export type routesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routes
     */
    select?: routesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routesInclude<ExtArgs> | null
  }


  /**
   * Model routePermission
   */

  export type AggregateRoutePermission = {
    _count: RoutePermissionCountAggregateOutputType | null
    _avg: RoutePermissionAvgAggregateOutputType | null
    _sum: RoutePermissionSumAggregateOutputType | null
    _min: RoutePermissionMinAggregateOutputType | null
    _max: RoutePermissionMaxAggregateOutputType | null
  }

  export type RoutePermissionAvgAggregateOutputType = {
    routeId: number | null
    permissionId: number | null
  }

  export type RoutePermissionSumAggregateOutputType = {
    routeId: number | null
    permissionId: number | null
  }

  export type RoutePermissionMinAggregateOutputType = {
    routeId: number | null
    permissionId: number | null
  }

  export type RoutePermissionMaxAggregateOutputType = {
    routeId: number | null
    permissionId: number | null
  }

  export type RoutePermissionCountAggregateOutputType = {
    routeId: number
    permissionId: number
    _all: number
  }


  export type RoutePermissionAvgAggregateInputType = {
    routeId?: true
    permissionId?: true
  }

  export type RoutePermissionSumAggregateInputType = {
    routeId?: true
    permissionId?: true
  }

  export type RoutePermissionMinAggregateInputType = {
    routeId?: true
    permissionId?: true
  }

  export type RoutePermissionMaxAggregateInputType = {
    routeId?: true
    permissionId?: true
  }

  export type RoutePermissionCountAggregateInputType = {
    routeId?: true
    permissionId?: true
    _all?: true
  }

  export type RoutePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which routePermission to aggregate.
     */
    where?: routePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routePermissions to fetch.
     */
    orderBy?: routePermissionOrderByWithRelationInput | routePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: routePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned routePermissions
    **/
    _count?: true | RoutePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoutePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoutePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoutePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoutePermissionMaxAggregateInputType
  }

  export type GetRoutePermissionAggregateType<T extends RoutePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRoutePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoutePermission[P]>
      : GetScalarType<T[P], AggregateRoutePermission[P]>
  }




  export type routePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: routePermissionWhereInput
    orderBy?: routePermissionOrderByWithAggregationInput | routePermissionOrderByWithAggregationInput[]
    by: RoutePermissionScalarFieldEnum[] | RoutePermissionScalarFieldEnum
    having?: routePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoutePermissionCountAggregateInputType | true
    _avg?: RoutePermissionAvgAggregateInputType
    _sum?: RoutePermissionSumAggregateInputType
    _min?: RoutePermissionMinAggregateInputType
    _max?: RoutePermissionMaxAggregateInputType
  }

  export type RoutePermissionGroupByOutputType = {
    routeId: number
    permissionId: number
    _count: RoutePermissionCountAggregateOutputType | null
    _avg: RoutePermissionAvgAggregateOutputType | null
    _sum: RoutePermissionSumAggregateOutputType | null
    _min: RoutePermissionMinAggregateOutputType | null
    _max: RoutePermissionMaxAggregateOutputType | null
  }

  type GetRoutePermissionGroupByPayload<T extends routePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoutePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoutePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoutePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RoutePermissionGroupByOutputType[P]>
        }
      >
    >


  export type routePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    routeId?: boolean
    permissionId?: boolean
    route?: boolean | routesDefaultArgs<ExtArgs>
    permission?: boolean | permissionsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["routePermission"]>


  export type routePermissionSelectScalar = {
    routeId?: boolean
    permissionId?: boolean
  }

  export type routePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    route?: boolean | routesDefaultArgs<ExtArgs>
    permission?: boolean | permissionsDefaultArgs<ExtArgs>
  }

  export type $routePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "routePermission"
    objects: {
      route: Prisma.$routesPayload<ExtArgs>
      permission: Prisma.$permissionsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      routeId: number
      permissionId: number
    }, ExtArgs["result"]["routePermission"]>
    composites: {}
  }

  type routePermissionGetPayload<S extends boolean | null | undefined | routePermissionDefaultArgs> = $Result.GetResult<Prisma.$routePermissionPayload, S>

  type routePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<routePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoutePermissionCountAggregateInputType | true
    }

  export interface routePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['routePermission'], meta: { name: 'routePermission' } }
    /**
     * Find zero or one RoutePermission that matches the filter.
     * @param {routePermissionFindUniqueArgs} args - Arguments to find a RoutePermission
     * @example
     * // Get one RoutePermission
     * const routePermission = await prisma.routePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends routePermissionFindUniqueArgs>(args: SelectSubset<T, routePermissionFindUniqueArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RoutePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {routePermissionFindUniqueOrThrowArgs} args - Arguments to find a RoutePermission
     * @example
     * // Get one RoutePermission
     * const routePermission = await prisma.routePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends routePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, routePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RoutePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routePermissionFindFirstArgs} args - Arguments to find a RoutePermission
     * @example
     * // Get one RoutePermission
     * const routePermission = await prisma.routePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends routePermissionFindFirstArgs>(args?: SelectSubset<T, routePermissionFindFirstArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RoutePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routePermissionFindFirstOrThrowArgs} args - Arguments to find a RoutePermission
     * @example
     * // Get one RoutePermission
     * const routePermission = await prisma.routePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends routePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, routePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RoutePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoutePermissions
     * const routePermissions = await prisma.routePermission.findMany()
     * 
     * // Get first 10 RoutePermissions
     * const routePermissions = await prisma.routePermission.findMany({ take: 10 })
     * 
     * // Only select the `routeId`
     * const routePermissionWithRouteIdOnly = await prisma.routePermission.findMany({ select: { routeId: true } })
     * 
     */
    findMany<T extends routePermissionFindManyArgs>(args?: SelectSubset<T, routePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RoutePermission.
     * @param {routePermissionCreateArgs} args - Arguments to create a RoutePermission.
     * @example
     * // Create one RoutePermission
     * const RoutePermission = await prisma.routePermission.create({
     *   data: {
     *     // ... data to create a RoutePermission
     *   }
     * })
     * 
     */
    create<T extends routePermissionCreateArgs>(args: SelectSubset<T, routePermissionCreateArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RoutePermissions.
     * @param {routePermissionCreateManyArgs} args - Arguments to create many RoutePermissions.
     * @example
     * // Create many RoutePermissions
     * const routePermission = await prisma.routePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends routePermissionCreateManyArgs>(args?: SelectSubset<T, routePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RoutePermission.
     * @param {routePermissionDeleteArgs} args - Arguments to delete one RoutePermission.
     * @example
     * // Delete one RoutePermission
     * const RoutePermission = await prisma.routePermission.delete({
     *   where: {
     *     // ... filter to delete one RoutePermission
     *   }
     * })
     * 
     */
    delete<T extends routePermissionDeleteArgs>(args: SelectSubset<T, routePermissionDeleteArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RoutePermission.
     * @param {routePermissionUpdateArgs} args - Arguments to update one RoutePermission.
     * @example
     * // Update one RoutePermission
     * const routePermission = await prisma.routePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends routePermissionUpdateArgs>(args: SelectSubset<T, routePermissionUpdateArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RoutePermissions.
     * @param {routePermissionDeleteManyArgs} args - Arguments to filter RoutePermissions to delete.
     * @example
     * // Delete a few RoutePermissions
     * const { count } = await prisma.routePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends routePermissionDeleteManyArgs>(args?: SelectSubset<T, routePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoutePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoutePermissions
     * const routePermission = await prisma.routePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends routePermissionUpdateManyArgs>(args: SelectSubset<T, routePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoutePermission.
     * @param {routePermissionUpsertArgs} args - Arguments to update or create a RoutePermission.
     * @example
     * // Update or create a RoutePermission
     * const routePermission = await prisma.routePermission.upsert({
     *   create: {
     *     // ... data to create a RoutePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoutePermission we want to update
     *   }
     * })
     */
    upsert<T extends routePermissionUpsertArgs>(args: SelectSubset<T, routePermissionUpsertArgs<ExtArgs>>): Prisma__routePermissionClient<$Result.GetResult<Prisma.$routePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RoutePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routePermissionCountArgs} args - Arguments to filter RoutePermissions to count.
     * @example
     * // Count the number of RoutePermissions
     * const count = await prisma.routePermission.count({
     *   where: {
     *     // ... the filter for the RoutePermissions we want to count
     *   }
     * })
    **/
    count<T extends routePermissionCountArgs>(
      args?: Subset<T, routePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoutePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoutePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoutePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoutePermissionAggregateArgs>(args: Subset<T, RoutePermissionAggregateArgs>): Prisma.PrismaPromise<GetRoutePermissionAggregateType<T>>

    /**
     * Group by RoutePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {routePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends routePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: routePermissionGroupByArgs['orderBy'] }
        : { orderBy?: routePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, routePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoutePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the routePermission model
   */
  readonly fields: routePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for routePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__routePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    route<T extends routesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, routesDefaultArgs<ExtArgs>>): Prisma__routesClient<$Result.GetResult<Prisma.$routesPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends permissionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, permissionsDefaultArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the routePermission model
   */ 
  interface routePermissionFieldRefs {
    readonly routeId: FieldRef<"routePermission", 'Int'>
    readonly permissionId: FieldRef<"routePermission", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * routePermission findUnique
   */
  export type routePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * Filter, which routePermission to fetch.
     */
    where: routePermissionWhereUniqueInput
  }

  /**
   * routePermission findUniqueOrThrow
   */
  export type routePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * Filter, which routePermission to fetch.
     */
    where: routePermissionWhereUniqueInput
  }

  /**
   * routePermission findFirst
   */
  export type routePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * Filter, which routePermission to fetch.
     */
    where?: routePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routePermissions to fetch.
     */
    orderBy?: routePermissionOrderByWithRelationInput | routePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for routePermissions.
     */
    cursor?: routePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of routePermissions.
     */
    distinct?: RoutePermissionScalarFieldEnum | RoutePermissionScalarFieldEnum[]
  }

  /**
   * routePermission findFirstOrThrow
   */
  export type routePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * Filter, which routePermission to fetch.
     */
    where?: routePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routePermissions to fetch.
     */
    orderBy?: routePermissionOrderByWithRelationInput | routePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for routePermissions.
     */
    cursor?: routePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of routePermissions.
     */
    distinct?: RoutePermissionScalarFieldEnum | RoutePermissionScalarFieldEnum[]
  }

  /**
   * routePermission findMany
   */
  export type routePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * Filter, which routePermissions to fetch.
     */
    where?: routePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of routePermissions to fetch.
     */
    orderBy?: routePermissionOrderByWithRelationInput | routePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing routePermissions.
     */
    cursor?: routePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` routePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` routePermissions.
     */
    skip?: number
    distinct?: RoutePermissionScalarFieldEnum | RoutePermissionScalarFieldEnum[]
  }

  /**
   * routePermission create
   */
  export type routePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a routePermission.
     */
    data: XOR<routePermissionCreateInput, routePermissionUncheckedCreateInput>
  }

  /**
   * routePermission createMany
   */
  export type routePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many routePermissions.
     */
    data: routePermissionCreateManyInput | routePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * routePermission update
   */
  export type routePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a routePermission.
     */
    data: XOR<routePermissionUpdateInput, routePermissionUncheckedUpdateInput>
    /**
     * Choose, which routePermission to update.
     */
    where: routePermissionWhereUniqueInput
  }

  /**
   * routePermission updateMany
   */
  export type routePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update routePermissions.
     */
    data: XOR<routePermissionUpdateManyMutationInput, routePermissionUncheckedUpdateManyInput>
    /**
     * Filter which routePermissions to update
     */
    where?: routePermissionWhereInput
  }

  /**
   * routePermission upsert
   */
  export type routePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the routePermission to update in case it exists.
     */
    where: routePermissionWhereUniqueInput
    /**
     * In case the routePermission found by the `where` argument doesn't exist, create a new routePermission with this data.
     */
    create: XOR<routePermissionCreateInput, routePermissionUncheckedCreateInput>
    /**
     * In case the routePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<routePermissionUpdateInput, routePermissionUncheckedUpdateInput>
  }

  /**
   * routePermission delete
   */
  export type routePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
    /**
     * Filter which routePermission to delete.
     */
    where: routePermissionWhereUniqueInput
  }

  /**
   * routePermission deleteMany
   */
  export type routePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which routePermissions to delete
     */
    where?: routePermissionWhereInput
  }

  /**
   * routePermission without action
   */
  export type routePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the routePermission
     */
    select?: routePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: routePermissionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BrandsScalarFieldEnum: {
    id: 'id',
    brand_name: 'brand_name'
  };

  export type BrandsScalarFieldEnum = (typeof BrandsScalarFieldEnum)[keyof typeof BrandsScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    product_name: 'product_name',
    img: 'img',
    city: 'city',
    release_year: 'release_year',
    p_condition: 'p_condition',
    delivery_status: 'delivery_status',
    isSold: 'isSold',
    price: 'price',
    brand_id: 'brand_id'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const UserGroupsScalarFieldEnum: {
    id: 'id',
    group_name: 'group_name'
  };

  export type UserGroupsScalarFieldEnum = (typeof UserGroupsScalarFieldEnum)[keyof typeof UserGroupsScalarFieldEnum]


  export const PermissionsScalarFieldEnum: {
    id: 'id',
    permission_name: 'permission_name'
  };

  export type PermissionsScalarFieldEnum = (typeof PermissionsScalarFieldEnum)[keyof typeof PermissionsScalarFieldEnum]


  export const GroupPermissionScalarFieldEnum: {
    userGroupId: 'userGroupId',
    permissionId: 'permissionId'
  };

  export type GroupPermissionScalarFieldEnum = (typeof GroupPermissionScalarFieldEnum)[keyof typeof GroupPermissionScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    phone: 'phone',
    pass: 'pass',
    userGroup_id: 'userGroup_id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const RoutesScalarFieldEnum: {
    id: 'id',
    route_name: 'route_name'
  };

  export type RoutesScalarFieldEnum = (typeof RoutesScalarFieldEnum)[keyof typeof RoutesScalarFieldEnum]


  export const RoutePermissionScalarFieldEnum: {
    routeId: 'routeId',
    permissionId: 'permissionId'
  };

  export type RoutePermissionScalarFieldEnum = (typeof RoutePermissionScalarFieldEnum)[keyof typeof RoutePermissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type brandsWhereInput = {
    AND?: brandsWhereInput | brandsWhereInput[]
    OR?: brandsWhereInput[]
    NOT?: brandsWhereInput | brandsWhereInput[]
    id?: IntFilter<"brands"> | number
    brand_name?: StringFilter<"brands"> | string
    products?: ProductsListRelationFilter
  }

  export type brandsOrderByWithRelationInput = {
    id?: SortOrder
    brand_name?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type brandsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: brandsWhereInput | brandsWhereInput[]
    OR?: brandsWhereInput[]
    NOT?: brandsWhereInput | brandsWhereInput[]
    brand_name?: StringFilter<"brands"> | string
    products?: ProductsListRelationFilter
  }, "id">

  export type brandsOrderByWithAggregationInput = {
    id?: SortOrder
    brand_name?: SortOrder
    _count?: brandsCountOrderByAggregateInput
    _avg?: brandsAvgOrderByAggregateInput
    _max?: brandsMaxOrderByAggregateInput
    _min?: brandsMinOrderByAggregateInput
    _sum?: brandsSumOrderByAggregateInput
  }

  export type brandsScalarWhereWithAggregatesInput = {
    AND?: brandsScalarWhereWithAggregatesInput | brandsScalarWhereWithAggregatesInput[]
    OR?: brandsScalarWhereWithAggregatesInput[]
    NOT?: brandsScalarWhereWithAggregatesInput | brandsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"brands"> | number
    brand_name?: StringWithAggregatesFilter<"brands"> | string
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: IntFilter<"products"> | number
    product_name?: StringFilter<"products"> | string
    img?: StringFilter<"products"> | string
    city?: StringFilter<"products"> | string
    release_year?: IntFilter<"products"> | number
    p_condition?: StringFilter<"products"> | string
    delivery_status?: StringFilter<"products"> | string
    isSold?: BoolFilter<"products"> | boolean
    price?: IntFilter<"products"> | number
    brand_id?: IntFilter<"products"> | number
    brand?: XOR<BrandsRelationFilter, brandsWhereInput>
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    product_name?: SortOrder
    img?: SortOrder
    city?: SortOrder
    release_year?: SortOrder
    p_condition?: SortOrder
    delivery_status?: SortOrder
    isSold?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
    brand?: brandsOrderByWithRelationInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    product_name?: StringFilter<"products"> | string
    img?: StringFilter<"products"> | string
    city?: StringFilter<"products"> | string
    release_year?: IntFilter<"products"> | number
    p_condition?: StringFilter<"products"> | string
    delivery_status?: StringFilter<"products"> | string
    isSold?: BoolFilter<"products"> | boolean
    price?: IntFilter<"products"> | number
    brand_id?: IntFilter<"products"> | number
    brand?: XOR<BrandsRelationFilter, brandsWhereInput>
  }, "id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    product_name?: SortOrder
    img?: SortOrder
    city?: SortOrder
    release_year?: SortOrder
    p_condition?: SortOrder
    delivery_status?: SortOrder
    isSold?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"products"> | number
    product_name?: StringWithAggregatesFilter<"products"> | string
    img?: StringWithAggregatesFilter<"products"> | string
    city?: StringWithAggregatesFilter<"products"> | string
    release_year?: IntWithAggregatesFilter<"products"> | number
    p_condition?: StringWithAggregatesFilter<"products"> | string
    delivery_status?: StringWithAggregatesFilter<"products"> | string
    isSold?: BoolWithAggregatesFilter<"products"> | boolean
    price?: IntWithAggregatesFilter<"products"> | number
    brand_id?: IntWithAggregatesFilter<"products"> | number
  }

  export type userGroupsWhereInput = {
    AND?: userGroupsWhereInput | userGroupsWhereInput[]
    OR?: userGroupsWhereInput[]
    NOT?: userGroupsWhereInput | userGroupsWhereInput[]
    id?: IntFilter<"userGroups"> | number
    group_name?: StringFilter<"userGroups"> | string
    permissions?: GroupPermissionListRelationFilter
    user?: UsersListRelationFilter
  }

  export type userGroupsOrderByWithRelationInput = {
    id?: SortOrder
    group_name?: SortOrder
    permissions?: groupPermissionOrderByRelationAggregateInput
    user?: usersOrderByRelationAggregateInput
  }

  export type userGroupsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    group_name?: string
    AND?: userGroupsWhereInput | userGroupsWhereInput[]
    OR?: userGroupsWhereInput[]
    NOT?: userGroupsWhereInput | userGroupsWhereInput[]
    permissions?: GroupPermissionListRelationFilter
    user?: UsersListRelationFilter
  }, "id" | "group_name">

  export type userGroupsOrderByWithAggregationInput = {
    id?: SortOrder
    group_name?: SortOrder
    _count?: userGroupsCountOrderByAggregateInput
    _avg?: userGroupsAvgOrderByAggregateInput
    _max?: userGroupsMaxOrderByAggregateInput
    _min?: userGroupsMinOrderByAggregateInput
    _sum?: userGroupsSumOrderByAggregateInput
  }

  export type userGroupsScalarWhereWithAggregatesInput = {
    AND?: userGroupsScalarWhereWithAggregatesInput | userGroupsScalarWhereWithAggregatesInput[]
    OR?: userGroupsScalarWhereWithAggregatesInput[]
    NOT?: userGroupsScalarWhereWithAggregatesInput | userGroupsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"userGroups"> | number
    group_name?: StringWithAggregatesFilter<"userGroups"> | string
  }

  export type permissionsWhereInput = {
    AND?: permissionsWhereInput | permissionsWhereInput[]
    OR?: permissionsWhereInput[]
    NOT?: permissionsWhereInput | permissionsWhereInput[]
    id?: IntFilter<"permissions"> | number
    permission_name?: StringFilter<"permissions"> | string
    userGroups?: GroupPermissionListRelationFilter
    routes?: RoutePermissionListRelationFilter
  }

  export type permissionsOrderByWithRelationInput = {
    id?: SortOrder
    permission_name?: SortOrder
    userGroups?: groupPermissionOrderByRelationAggregateInput
    routes?: routePermissionOrderByRelationAggregateInput
  }

  export type permissionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: permissionsWhereInput | permissionsWhereInput[]
    OR?: permissionsWhereInput[]
    NOT?: permissionsWhereInput | permissionsWhereInput[]
    permission_name?: StringFilter<"permissions"> | string
    userGroups?: GroupPermissionListRelationFilter
    routes?: RoutePermissionListRelationFilter
  }, "id">

  export type permissionsOrderByWithAggregationInput = {
    id?: SortOrder
    permission_name?: SortOrder
    _count?: permissionsCountOrderByAggregateInput
    _avg?: permissionsAvgOrderByAggregateInput
    _max?: permissionsMaxOrderByAggregateInput
    _min?: permissionsMinOrderByAggregateInput
    _sum?: permissionsSumOrderByAggregateInput
  }

  export type permissionsScalarWhereWithAggregatesInput = {
    AND?: permissionsScalarWhereWithAggregatesInput | permissionsScalarWhereWithAggregatesInput[]
    OR?: permissionsScalarWhereWithAggregatesInput[]
    NOT?: permissionsScalarWhereWithAggregatesInput | permissionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"permissions"> | number
    permission_name?: StringWithAggregatesFilter<"permissions"> | string
  }

  export type groupPermissionWhereInput = {
    AND?: groupPermissionWhereInput | groupPermissionWhereInput[]
    OR?: groupPermissionWhereInput[]
    NOT?: groupPermissionWhereInput | groupPermissionWhereInput[]
    userGroupId?: IntFilter<"groupPermission"> | number
    permissionId?: IntFilter<"groupPermission"> | number
    userGroup?: XOR<UserGroupsRelationFilter, userGroupsWhereInput>
    permission?: XOR<PermissionsRelationFilter, permissionsWhereInput>
  }

  export type groupPermissionOrderByWithRelationInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
    userGroup?: userGroupsOrderByWithRelationInput
    permission?: permissionsOrderByWithRelationInput
  }

  export type groupPermissionWhereUniqueInput = Prisma.AtLeast<{
    userGroupId_permissionId?: groupPermissionUserGroupIdPermissionIdCompoundUniqueInput
    AND?: groupPermissionWhereInput | groupPermissionWhereInput[]
    OR?: groupPermissionWhereInput[]
    NOT?: groupPermissionWhereInput | groupPermissionWhereInput[]
    userGroupId?: IntFilter<"groupPermission"> | number
    permissionId?: IntFilter<"groupPermission"> | number
    userGroup?: XOR<UserGroupsRelationFilter, userGroupsWhereInput>
    permission?: XOR<PermissionsRelationFilter, permissionsWhereInput>
  }, "userGroupId_permissionId">

  export type groupPermissionOrderByWithAggregationInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
    _count?: groupPermissionCountOrderByAggregateInput
    _avg?: groupPermissionAvgOrderByAggregateInput
    _max?: groupPermissionMaxOrderByAggregateInput
    _min?: groupPermissionMinOrderByAggregateInput
    _sum?: groupPermissionSumOrderByAggregateInput
  }

  export type groupPermissionScalarWhereWithAggregatesInput = {
    AND?: groupPermissionScalarWhereWithAggregatesInput | groupPermissionScalarWhereWithAggregatesInput[]
    OR?: groupPermissionScalarWhereWithAggregatesInput[]
    NOT?: groupPermissionScalarWhereWithAggregatesInput | groupPermissionScalarWhereWithAggregatesInput[]
    userGroupId?: IntWithAggregatesFilter<"groupPermission"> | number
    permissionId?: IntWithAggregatesFilter<"groupPermission"> | number
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    phone?: StringFilter<"users"> | string
    pass?: StringFilter<"users"> | string
    userGroup_id?: IntFilter<"users"> | number
    userGroup?: XOR<UserGroupsRelationFilter, userGroupsWhereInput>
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    phone?: SortOrder
    pass?: SortOrder
    userGroup_id?: SortOrder
    userGroup?: userGroupsOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phone?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    pass?: StringFilter<"users"> | string
    userGroup_id?: IntFilter<"users"> | number
    userGroup?: XOR<UserGroupsRelationFilter, userGroupsWhereInput>
  }, "id" | "phone">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    phone?: SortOrder
    pass?: SortOrder
    userGroup_id?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    phone?: StringWithAggregatesFilter<"users"> | string
    pass?: StringWithAggregatesFilter<"users"> | string
    userGroup_id?: IntWithAggregatesFilter<"users"> | number
  }

  export type routesWhereInput = {
    AND?: routesWhereInput | routesWhereInput[]
    OR?: routesWhereInput[]
    NOT?: routesWhereInput | routesWhereInput[]
    id?: IntFilter<"routes"> | number
    route_name?: StringFilter<"routes"> | string
    permissions?: RoutePermissionListRelationFilter
  }

  export type routesOrderByWithRelationInput = {
    id?: SortOrder
    route_name?: SortOrder
    permissions?: routePermissionOrderByRelationAggregateInput
  }

  export type routesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    route_name?: string
    AND?: routesWhereInput | routesWhereInput[]
    OR?: routesWhereInput[]
    NOT?: routesWhereInput | routesWhereInput[]
    permissions?: RoutePermissionListRelationFilter
  }, "id" | "route_name">

  export type routesOrderByWithAggregationInput = {
    id?: SortOrder
    route_name?: SortOrder
    _count?: routesCountOrderByAggregateInput
    _avg?: routesAvgOrderByAggregateInput
    _max?: routesMaxOrderByAggregateInput
    _min?: routesMinOrderByAggregateInput
    _sum?: routesSumOrderByAggregateInput
  }

  export type routesScalarWhereWithAggregatesInput = {
    AND?: routesScalarWhereWithAggregatesInput | routesScalarWhereWithAggregatesInput[]
    OR?: routesScalarWhereWithAggregatesInput[]
    NOT?: routesScalarWhereWithAggregatesInput | routesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"routes"> | number
    route_name?: StringWithAggregatesFilter<"routes"> | string
  }

  export type routePermissionWhereInput = {
    AND?: routePermissionWhereInput | routePermissionWhereInput[]
    OR?: routePermissionWhereInput[]
    NOT?: routePermissionWhereInput | routePermissionWhereInput[]
    routeId?: IntFilter<"routePermission"> | number
    permissionId?: IntFilter<"routePermission"> | number
    route?: XOR<RoutesRelationFilter, routesWhereInput>
    permission?: XOR<PermissionsRelationFilter, permissionsWhereInput>
  }

  export type routePermissionOrderByWithRelationInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
    route?: routesOrderByWithRelationInput
    permission?: permissionsOrderByWithRelationInput
  }

  export type routePermissionWhereUniqueInput = Prisma.AtLeast<{
    routeId_permissionId?: routePermissionRouteIdPermissionIdCompoundUniqueInput
    AND?: routePermissionWhereInput | routePermissionWhereInput[]
    OR?: routePermissionWhereInput[]
    NOT?: routePermissionWhereInput | routePermissionWhereInput[]
    routeId?: IntFilter<"routePermission"> | number
    permissionId?: IntFilter<"routePermission"> | number
    route?: XOR<RoutesRelationFilter, routesWhereInput>
    permission?: XOR<PermissionsRelationFilter, permissionsWhereInput>
  }, "routeId_permissionId">

  export type routePermissionOrderByWithAggregationInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
    _count?: routePermissionCountOrderByAggregateInput
    _avg?: routePermissionAvgOrderByAggregateInput
    _max?: routePermissionMaxOrderByAggregateInput
    _min?: routePermissionMinOrderByAggregateInput
    _sum?: routePermissionSumOrderByAggregateInput
  }

  export type routePermissionScalarWhereWithAggregatesInput = {
    AND?: routePermissionScalarWhereWithAggregatesInput | routePermissionScalarWhereWithAggregatesInput[]
    OR?: routePermissionScalarWhereWithAggregatesInput[]
    NOT?: routePermissionScalarWhereWithAggregatesInput | routePermissionScalarWhereWithAggregatesInput[]
    routeId?: IntWithAggregatesFilter<"routePermission"> | number
    permissionId?: IntWithAggregatesFilter<"routePermission"> | number
  }

  export type brandsCreateInput = {
    brand_name: string
    products?: productsCreateNestedManyWithoutBrandInput
  }

  export type brandsUncheckedCreateInput = {
    id?: number
    brand_name: string
    products?: productsUncheckedCreateNestedManyWithoutBrandInput
  }

  export type brandsUpdateInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutBrandNestedInput
  }

  export type brandsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type brandsCreateManyInput = {
    id?: number
    brand_name: string
  }

  export type brandsUpdateManyMutationInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
  }

  export type brandsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateInput = {
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold?: boolean
    price: number
    brand: brandsCreateNestedOneWithoutProductsInput
  }

  export type productsUncheckedCreateInput = {
    id?: number
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold?: boolean
    price: number
    brand_id: number
  }

  export type productsUpdateInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    brand?: brandsUpdateOneRequiredWithoutProductsNestedInput
  }

  export type productsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    brand_id?: IntFieldUpdateOperationsInput | number
  }

  export type productsCreateManyInput = {
    id?: number
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold?: boolean
    price: number
    brand_id: number
  }

  export type productsUpdateManyMutationInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    brand_id?: IntFieldUpdateOperationsInput | number
  }

  export type userGroupsCreateInput = {
    group_name: string
    permissions?: groupPermissionCreateNestedManyWithoutUserGroupInput
    user?: usersCreateNestedManyWithoutUserGroupInput
  }

  export type userGroupsUncheckedCreateInput = {
    id?: number
    group_name: string
    permissions?: groupPermissionUncheckedCreateNestedManyWithoutUserGroupInput
    user?: usersUncheckedCreateNestedManyWithoutUserGroupInput
  }

  export type userGroupsUpdateInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    permissions?: groupPermissionUpdateManyWithoutUserGroupNestedInput
    user?: usersUpdateManyWithoutUserGroupNestedInput
  }

  export type userGroupsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    permissions?: groupPermissionUncheckedUpdateManyWithoutUserGroupNestedInput
    user?: usersUncheckedUpdateManyWithoutUserGroupNestedInput
  }

  export type userGroupsCreateManyInput = {
    id?: number
    group_name: string
  }

  export type userGroupsUpdateManyMutationInput = {
    group_name?: StringFieldUpdateOperationsInput | string
  }

  export type userGroupsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsCreateInput = {
    permission_name: string
    userGroups?: groupPermissionCreateNestedManyWithoutPermissionInput
    routes?: routePermissionCreateNestedManyWithoutPermissionInput
  }

  export type permissionsUncheckedCreateInput = {
    id?: number
    permission_name: string
    userGroups?: groupPermissionUncheckedCreateNestedManyWithoutPermissionInput
    routes?: routePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type permissionsUpdateInput = {
    permission_name?: StringFieldUpdateOperationsInput | string
    userGroups?: groupPermissionUpdateManyWithoutPermissionNestedInput
    routes?: routePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type permissionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    permission_name?: StringFieldUpdateOperationsInput | string
    userGroups?: groupPermissionUncheckedUpdateManyWithoutPermissionNestedInput
    routes?: routePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type permissionsCreateManyInput = {
    id?: number
    permission_name: string
  }

  export type permissionsUpdateManyMutationInput = {
    permission_name?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    permission_name?: StringFieldUpdateOperationsInput | string
  }

  export type groupPermissionCreateInput = {
    userGroup: userGroupsCreateNestedOneWithoutPermissionsInput
    permission: permissionsCreateNestedOneWithoutUserGroupsInput
  }

  export type groupPermissionUncheckedCreateInput = {
    userGroupId: number
    permissionId: number
  }

  export type groupPermissionUpdateInput = {
    userGroup?: userGroupsUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: permissionsUpdateOneRequiredWithoutUserGroupsNestedInput
  }

  export type groupPermissionUncheckedUpdateInput = {
    userGroupId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type groupPermissionCreateManyInput = {
    userGroupId: number
    permissionId: number
  }

  export type groupPermissionUpdateManyMutationInput = {

  }

  export type groupPermissionUncheckedUpdateManyInput = {
    userGroupId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateInput = {
    phone: string
    pass: string
    userGroup: userGroupsCreateNestedOneWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    phone: string
    pass: string
    userGroup_id: number
  }

  export type usersUpdateInput = {
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    userGroup?: userGroupsUpdateOneRequiredWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    userGroup_id?: IntFieldUpdateOperationsInput | number
  }

  export type usersCreateManyInput = {
    id?: number
    phone: string
    pass: string
    userGroup_id: number
  }

  export type usersUpdateManyMutationInput = {
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
    userGroup_id?: IntFieldUpdateOperationsInput | number
  }

  export type routesCreateInput = {
    route_name: string
    permissions?: routePermissionCreateNestedManyWithoutRouteInput
  }

  export type routesUncheckedCreateInput = {
    id?: number
    route_name: string
    permissions?: routePermissionUncheckedCreateNestedManyWithoutRouteInput
  }

  export type routesUpdateInput = {
    route_name?: StringFieldUpdateOperationsInput | string
    permissions?: routePermissionUpdateManyWithoutRouteNestedInput
  }

  export type routesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    route_name?: StringFieldUpdateOperationsInput | string
    permissions?: routePermissionUncheckedUpdateManyWithoutRouteNestedInput
  }

  export type routesCreateManyInput = {
    id?: number
    route_name: string
  }

  export type routesUpdateManyMutationInput = {
    route_name?: StringFieldUpdateOperationsInput | string
  }

  export type routesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    route_name?: StringFieldUpdateOperationsInput | string
  }

  export type routePermissionCreateInput = {
    route: routesCreateNestedOneWithoutPermissionsInput
    permission: permissionsCreateNestedOneWithoutRoutesInput
  }

  export type routePermissionUncheckedCreateInput = {
    routeId: number
    permissionId: number
  }

  export type routePermissionUpdateInput = {
    route?: routesUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: permissionsUpdateOneRequiredWithoutRoutesNestedInput
  }

  export type routePermissionUncheckedUpdateInput = {
    routeId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type routePermissionCreateManyInput = {
    routeId: number
    permissionId: number
  }

  export type routePermissionUpdateManyMutationInput = {

  }

  export type routePermissionUncheckedUpdateManyInput = {
    routeId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type brandsCountOrderByAggregateInput = {
    id?: SortOrder
    brand_name?: SortOrder
  }

  export type brandsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type brandsMaxOrderByAggregateInput = {
    id?: SortOrder
    brand_name?: SortOrder
  }

  export type brandsMinOrderByAggregateInput = {
    id?: SortOrder
    brand_name?: SortOrder
  }

  export type brandsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BrandsRelationFilter = {
    is?: brandsWhereInput
    isNot?: brandsWhereInput
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    img?: SortOrder
    city?: SortOrder
    release_year?: SortOrder
    p_condition?: SortOrder
    delivery_status?: SortOrder
    isSold?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    id?: SortOrder
    release_year?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    img?: SortOrder
    city?: SortOrder
    release_year?: SortOrder
    p_condition?: SortOrder
    delivery_status?: SortOrder
    isSold?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    product_name?: SortOrder
    img?: SortOrder
    city?: SortOrder
    release_year?: SortOrder
    p_condition?: SortOrder
    delivery_status?: SortOrder
    isSold?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    id?: SortOrder
    release_year?: SortOrder
    price?: SortOrder
    brand_id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GroupPermissionListRelationFilter = {
    every?: groupPermissionWhereInput
    some?: groupPermissionWhereInput
    none?: groupPermissionWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type groupPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userGroupsCountOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
  }

  export type userGroupsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userGroupsMaxOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
  }

  export type userGroupsMinOrderByAggregateInput = {
    id?: SortOrder
    group_name?: SortOrder
  }

  export type userGroupsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoutePermissionListRelationFilter = {
    every?: routePermissionWhereInput
    some?: routePermissionWhereInput
    none?: routePermissionWhereInput
  }

  export type routePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type permissionsCountOrderByAggregateInput = {
    id?: SortOrder
    permission_name?: SortOrder
  }

  export type permissionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type permissionsMaxOrderByAggregateInput = {
    id?: SortOrder
    permission_name?: SortOrder
  }

  export type permissionsMinOrderByAggregateInput = {
    id?: SortOrder
    permission_name?: SortOrder
  }

  export type permissionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserGroupsRelationFilter = {
    is?: userGroupsWhereInput
    isNot?: userGroupsWhereInput
  }

  export type PermissionsRelationFilter = {
    is?: permissionsWhereInput
    isNot?: permissionsWhereInput
  }

  export type groupPermissionUserGroupIdPermissionIdCompoundUniqueInput = {
    userGroupId: number
    permissionId: number
  }

  export type groupPermissionCountOrderByAggregateInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
  }

  export type groupPermissionAvgOrderByAggregateInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
  }

  export type groupPermissionMaxOrderByAggregateInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
  }

  export type groupPermissionMinOrderByAggregateInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
  }

  export type groupPermissionSumOrderByAggregateInput = {
    userGroupId?: SortOrder
    permissionId?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    pass?: SortOrder
    userGroup_id?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    userGroup_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    pass?: SortOrder
    userGroup_id?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
    pass?: SortOrder
    userGroup_id?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    userGroup_id?: SortOrder
  }

  export type routesCountOrderByAggregateInput = {
    id?: SortOrder
    route_name?: SortOrder
  }

  export type routesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type routesMaxOrderByAggregateInput = {
    id?: SortOrder
    route_name?: SortOrder
  }

  export type routesMinOrderByAggregateInput = {
    id?: SortOrder
    route_name?: SortOrder
  }

  export type routesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoutesRelationFilter = {
    is?: routesWhereInput
    isNot?: routesWhereInput
  }

  export type routePermissionRouteIdPermissionIdCompoundUniqueInput = {
    routeId: number
    permissionId: number
  }

  export type routePermissionCountOrderByAggregateInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
  }

  export type routePermissionAvgOrderByAggregateInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
  }

  export type routePermissionMaxOrderByAggregateInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
  }

  export type routePermissionMinOrderByAggregateInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
  }

  export type routePermissionSumOrderByAggregateInput = {
    routeId?: SortOrder
    permissionId?: SortOrder
  }

  export type productsCreateNestedManyWithoutBrandInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type productsUpdateManyWithoutBrandNestedInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutBrandInput | productsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutBrandInput | productsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: productsUpdateManyWithWhereWithoutBrandInput | productsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productsUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput> | productsCreateWithoutBrandInput[] | productsUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: productsCreateOrConnectWithoutBrandInput | productsCreateOrConnectWithoutBrandInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutBrandInput | productsUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: productsCreateManyBrandInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutBrandInput | productsUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: productsUpdateManyWithWhereWithoutBrandInput | productsUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type brandsCreateNestedOneWithoutProductsInput = {
    create?: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutProductsInput
    connect?: brandsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type brandsUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    connectOrCreate?: brandsCreateOrConnectWithoutProductsInput
    upsert?: brandsUpsertWithoutProductsInput
    connect?: brandsWhereUniqueInput
    update?: XOR<XOR<brandsUpdateToOneWithWhereWithoutProductsInput, brandsUpdateWithoutProductsInput>, brandsUncheckedUpdateWithoutProductsInput>
  }

  export type groupPermissionCreateNestedManyWithoutUserGroupInput = {
    create?: XOR<groupPermissionCreateWithoutUserGroupInput, groupPermissionUncheckedCreateWithoutUserGroupInput> | groupPermissionCreateWithoutUserGroupInput[] | groupPermissionUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutUserGroupInput | groupPermissionCreateOrConnectWithoutUserGroupInput[]
    createMany?: groupPermissionCreateManyUserGroupInputEnvelope
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutUserGroupInput = {
    create?: XOR<usersCreateWithoutUserGroupInput, usersUncheckedCreateWithoutUserGroupInput> | usersCreateWithoutUserGroupInput[] | usersUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: usersCreateOrConnectWithoutUserGroupInput | usersCreateOrConnectWithoutUserGroupInput[]
    createMany?: usersCreateManyUserGroupInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type groupPermissionUncheckedCreateNestedManyWithoutUserGroupInput = {
    create?: XOR<groupPermissionCreateWithoutUserGroupInput, groupPermissionUncheckedCreateWithoutUserGroupInput> | groupPermissionCreateWithoutUserGroupInput[] | groupPermissionUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutUserGroupInput | groupPermissionCreateOrConnectWithoutUserGroupInput[]
    createMany?: groupPermissionCreateManyUserGroupInputEnvelope
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutUserGroupInput = {
    create?: XOR<usersCreateWithoutUserGroupInput, usersUncheckedCreateWithoutUserGroupInput> | usersCreateWithoutUserGroupInput[] | usersUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: usersCreateOrConnectWithoutUserGroupInput | usersCreateOrConnectWithoutUserGroupInput[]
    createMany?: usersCreateManyUserGroupInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type groupPermissionUpdateManyWithoutUserGroupNestedInput = {
    create?: XOR<groupPermissionCreateWithoutUserGroupInput, groupPermissionUncheckedCreateWithoutUserGroupInput> | groupPermissionCreateWithoutUserGroupInput[] | groupPermissionUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutUserGroupInput | groupPermissionCreateOrConnectWithoutUserGroupInput[]
    upsert?: groupPermissionUpsertWithWhereUniqueWithoutUserGroupInput | groupPermissionUpsertWithWhereUniqueWithoutUserGroupInput[]
    createMany?: groupPermissionCreateManyUserGroupInputEnvelope
    set?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    disconnect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    delete?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    update?: groupPermissionUpdateWithWhereUniqueWithoutUserGroupInput | groupPermissionUpdateWithWhereUniqueWithoutUserGroupInput[]
    updateMany?: groupPermissionUpdateManyWithWhereWithoutUserGroupInput | groupPermissionUpdateManyWithWhereWithoutUserGroupInput[]
    deleteMany?: groupPermissionScalarWhereInput | groupPermissionScalarWhereInput[]
  }

  export type usersUpdateManyWithoutUserGroupNestedInput = {
    create?: XOR<usersCreateWithoutUserGroupInput, usersUncheckedCreateWithoutUserGroupInput> | usersCreateWithoutUserGroupInput[] | usersUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: usersCreateOrConnectWithoutUserGroupInput | usersCreateOrConnectWithoutUserGroupInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutUserGroupInput | usersUpsertWithWhereUniqueWithoutUserGroupInput[]
    createMany?: usersCreateManyUserGroupInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutUserGroupInput | usersUpdateWithWhereUniqueWithoutUserGroupInput[]
    updateMany?: usersUpdateManyWithWhereWithoutUserGroupInput | usersUpdateManyWithWhereWithoutUserGroupInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type groupPermissionUncheckedUpdateManyWithoutUserGroupNestedInput = {
    create?: XOR<groupPermissionCreateWithoutUserGroupInput, groupPermissionUncheckedCreateWithoutUserGroupInput> | groupPermissionCreateWithoutUserGroupInput[] | groupPermissionUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutUserGroupInput | groupPermissionCreateOrConnectWithoutUserGroupInput[]
    upsert?: groupPermissionUpsertWithWhereUniqueWithoutUserGroupInput | groupPermissionUpsertWithWhereUniqueWithoutUserGroupInput[]
    createMany?: groupPermissionCreateManyUserGroupInputEnvelope
    set?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    disconnect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    delete?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    update?: groupPermissionUpdateWithWhereUniqueWithoutUserGroupInput | groupPermissionUpdateWithWhereUniqueWithoutUserGroupInput[]
    updateMany?: groupPermissionUpdateManyWithWhereWithoutUserGroupInput | groupPermissionUpdateManyWithWhereWithoutUserGroupInput[]
    deleteMany?: groupPermissionScalarWhereInput | groupPermissionScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutUserGroupNestedInput = {
    create?: XOR<usersCreateWithoutUserGroupInput, usersUncheckedCreateWithoutUserGroupInput> | usersCreateWithoutUserGroupInput[] | usersUncheckedCreateWithoutUserGroupInput[]
    connectOrCreate?: usersCreateOrConnectWithoutUserGroupInput | usersCreateOrConnectWithoutUserGroupInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutUserGroupInput | usersUpsertWithWhereUniqueWithoutUserGroupInput[]
    createMany?: usersCreateManyUserGroupInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutUserGroupInput | usersUpdateWithWhereUniqueWithoutUserGroupInput[]
    updateMany?: usersUpdateManyWithWhereWithoutUserGroupInput | usersUpdateManyWithWhereWithoutUserGroupInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type groupPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<groupPermissionCreateWithoutPermissionInput, groupPermissionUncheckedCreateWithoutPermissionInput> | groupPermissionCreateWithoutPermissionInput[] | groupPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutPermissionInput | groupPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: groupPermissionCreateManyPermissionInputEnvelope
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
  }

  export type routePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<routePermissionCreateWithoutPermissionInput, routePermissionUncheckedCreateWithoutPermissionInput> | routePermissionCreateWithoutPermissionInput[] | routePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutPermissionInput | routePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: routePermissionCreateManyPermissionInputEnvelope
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
  }

  export type groupPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<groupPermissionCreateWithoutPermissionInput, groupPermissionUncheckedCreateWithoutPermissionInput> | groupPermissionCreateWithoutPermissionInput[] | groupPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutPermissionInput | groupPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: groupPermissionCreateManyPermissionInputEnvelope
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
  }

  export type routePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<routePermissionCreateWithoutPermissionInput, routePermissionUncheckedCreateWithoutPermissionInput> | routePermissionCreateWithoutPermissionInput[] | routePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutPermissionInput | routePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: routePermissionCreateManyPermissionInputEnvelope
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
  }

  export type groupPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<groupPermissionCreateWithoutPermissionInput, groupPermissionUncheckedCreateWithoutPermissionInput> | groupPermissionCreateWithoutPermissionInput[] | groupPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutPermissionInput | groupPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: groupPermissionUpsertWithWhereUniqueWithoutPermissionInput | groupPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: groupPermissionCreateManyPermissionInputEnvelope
    set?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    disconnect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    delete?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    update?: groupPermissionUpdateWithWhereUniqueWithoutPermissionInput | groupPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: groupPermissionUpdateManyWithWhereWithoutPermissionInput | groupPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: groupPermissionScalarWhereInput | groupPermissionScalarWhereInput[]
  }

  export type routePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<routePermissionCreateWithoutPermissionInput, routePermissionUncheckedCreateWithoutPermissionInput> | routePermissionCreateWithoutPermissionInput[] | routePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutPermissionInput | routePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: routePermissionUpsertWithWhereUniqueWithoutPermissionInput | routePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: routePermissionCreateManyPermissionInputEnvelope
    set?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    disconnect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    delete?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    update?: routePermissionUpdateWithWhereUniqueWithoutPermissionInput | routePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: routePermissionUpdateManyWithWhereWithoutPermissionInput | routePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: routePermissionScalarWhereInput | routePermissionScalarWhereInput[]
  }

  export type groupPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<groupPermissionCreateWithoutPermissionInput, groupPermissionUncheckedCreateWithoutPermissionInput> | groupPermissionCreateWithoutPermissionInput[] | groupPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: groupPermissionCreateOrConnectWithoutPermissionInput | groupPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: groupPermissionUpsertWithWhereUniqueWithoutPermissionInput | groupPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: groupPermissionCreateManyPermissionInputEnvelope
    set?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    disconnect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    delete?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    connect?: groupPermissionWhereUniqueInput | groupPermissionWhereUniqueInput[]
    update?: groupPermissionUpdateWithWhereUniqueWithoutPermissionInput | groupPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: groupPermissionUpdateManyWithWhereWithoutPermissionInput | groupPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: groupPermissionScalarWhereInput | groupPermissionScalarWhereInput[]
  }

  export type routePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<routePermissionCreateWithoutPermissionInput, routePermissionUncheckedCreateWithoutPermissionInput> | routePermissionCreateWithoutPermissionInput[] | routePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutPermissionInput | routePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: routePermissionUpsertWithWhereUniqueWithoutPermissionInput | routePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: routePermissionCreateManyPermissionInputEnvelope
    set?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    disconnect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    delete?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    update?: routePermissionUpdateWithWhereUniqueWithoutPermissionInput | routePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: routePermissionUpdateManyWithWhereWithoutPermissionInput | routePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: routePermissionScalarWhereInput | routePermissionScalarWhereInput[]
  }

  export type userGroupsCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<userGroupsCreateWithoutPermissionsInput, userGroupsUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: userGroupsCreateOrConnectWithoutPermissionsInput
    connect?: userGroupsWhereUniqueInput
  }

  export type permissionsCreateNestedOneWithoutUserGroupsInput = {
    create?: XOR<permissionsCreateWithoutUserGroupsInput, permissionsUncheckedCreateWithoutUserGroupsInput>
    connectOrCreate?: permissionsCreateOrConnectWithoutUserGroupsInput
    connect?: permissionsWhereUniqueInput
  }

  export type userGroupsUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<userGroupsCreateWithoutPermissionsInput, userGroupsUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: userGroupsCreateOrConnectWithoutPermissionsInput
    upsert?: userGroupsUpsertWithoutPermissionsInput
    connect?: userGroupsWhereUniqueInput
    update?: XOR<XOR<userGroupsUpdateToOneWithWhereWithoutPermissionsInput, userGroupsUpdateWithoutPermissionsInput>, userGroupsUncheckedUpdateWithoutPermissionsInput>
  }

  export type permissionsUpdateOneRequiredWithoutUserGroupsNestedInput = {
    create?: XOR<permissionsCreateWithoutUserGroupsInput, permissionsUncheckedCreateWithoutUserGroupsInput>
    connectOrCreate?: permissionsCreateOrConnectWithoutUserGroupsInput
    upsert?: permissionsUpsertWithoutUserGroupsInput
    connect?: permissionsWhereUniqueInput
    update?: XOR<XOR<permissionsUpdateToOneWithWhereWithoutUserGroupsInput, permissionsUpdateWithoutUserGroupsInput>, permissionsUncheckedUpdateWithoutUserGroupsInput>
  }

  export type userGroupsCreateNestedOneWithoutUserInput = {
    create?: XOR<userGroupsCreateWithoutUserInput, userGroupsUncheckedCreateWithoutUserInput>
    connectOrCreate?: userGroupsCreateOrConnectWithoutUserInput
    connect?: userGroupsWhereUniqueInput
  }

  export type userGroupsUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<userGroupsCreateWithoutUserInput, userGroupsUncheckedCreateWithoutUserInput>
    connectOrCreate?: userGroupsCreateOrConnectWithoutUserInput
    upsert?: userGroupsUpsertWithoutUserInput
    connect?: userGroupsWhereUniqueInput
    update?: XOR<XOR<userGroupsUpdateToOneWithWhereWithoutUserInput, userGroupsUpdateWithoutUserInput>, userGroupsUncheckedUpdateWithoutUserInput>
  }

  export type routePermissionCreateNestedManyWithoutRouteInput = {
    create?: XOR<routePermissionCreateWithoutRouteInput, routePermissionUncheckedCreateWithoutRouteInput> | routePermissionCreateWithoutRouteInput[] | routePermissionUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutRouteInput | routePermissionCreateOrConnectWithoutRouteInput[]
    createMany?: routePermissionCreateManyRouteInputEnvelope
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
  }

  export type routePermissionUncheckedCreateNestedManyWithoutRouteInput = {
    create?: XOR<routePermissionCreateWithoutRouteInput, routePermissionUncheckedCreateWithoutRouteInput> | routePermissionCreateWithoutRouteInput[] | routePermissionUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutRouteInput | routePermissionCreateOrConnectWithoutRouteInput[]
    createMany?: routePermissionCreateManyRouteInputEnvelope
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
  }

  export type routePermissionUpdateManyWithoutRouteNestedInput = {
    create?: XOR<routePermissionCreateWithoutRouteInput, routePermissionUncheckedCreateWithoutRouteInput> | routePermissionCreateWithoutRouteInput[] | routePermissionUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutRouteInput | routePermissionCreateOrConnectWithoutRouteInput[]
    upsert?: routePermissionUpsertWithWhereUniqueWithoutRouteInput | routePermissionUpsertWithWhereUniqueWithoutRouteInput[]
    createMany?: routePermissionCreateManyRouteInputEnvelope
    set?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    disconnect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    delete?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    update?: routePermissionUpdateWithWhereUniqueWithoutRouteInput | routePermissionUpdateWithWhereUniqueWithoutRouteInput[]
    updateMany?: routePermissionUpdateManyWithWhereWithoutRouteInput | routePermissionUpdateManyWithWhereWithoutRouteInput[]
    deleteMany?: routePermissionScalarWhereInput | routePermissionScalarWhereInput[]
  }

  export type routePermissionUncheckedUpdateManyWithoutRouteNestedInput = {
    create?: XOR<routePermissionCreateWithoutRouteInput, routePermissionUncheckedCreateWithoutRouteInput> | routePermissionCreateWithoutRouteInput[] | routePermissionUncheckedCreateWithoutRouteInput[]
    connectOrCreate?: routePermissionCreateOrConnectWithoutRouteInput | routePermissionCreateOrConnectWithoutRouteInput[]
    upsert?: routePermissionUpsertWithWhereUniqueWithoutRouteInput | routePermissionUpsertWithWhereUniqueWithoutRouteInput[]
    createMany?: routePermissionCreateManyRouteInputEnvelope
    set?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    disconnect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    delete?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    connect?: routePermissionWhereUniqueInput | routePermissionWhereUniqueInput[]
    update?: routePermissionUpdateWithWhereUniqueWithoutRouteInput | routePermissionUpdateWithWhereUniqueWithoutRouteInput[]
    updateMany?: routePermissionUpdateManyWithWhereWithoutRouteInput | routePermissionUpdateManyWithWhereWithoutRouteInput[]
    deleteMany?: routePermissionScalarWhereInput | routePermissionScalarWhereInput[]
  }

  export type routesCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<routesCreateWithoutPermissionsInput, routesUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: routesCreateOrConnectWithoutPermissionsInput
    connect?: routesWhereUniqueInput
  }

  export type permissionsCreateNestedOneWithoutRoutesInput = {
    create?: XOR<permissionsCreateWithoutRoutesInput, permissionsUncheckedCreateWithoutRoutesInput>
    connectOrCreate?: permissionsCreateOrConnectWithoutRoutesInput
    connect?: permissionsWhereUniqueInput
  }

  export type routesUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<routesCreateWithoutPermissionsInput, routesUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: routesCreateOrConnectWithoutPermissionsInput
    upsert?: routesUpsertWithoutPermissionsInput
    connect?: routesWhereUniqueInput
    update?: XOR<XOR<routesUpdateToOneWithWhereWithoutPermissionsInput, routesUpdateWithoutPermissionsInput>, routesUncheckedUpdateWithoutPermissionsInput>
  }

  export type permissionsUpdateOneRequiredWithoutRoutesNestedInput = {
    create?: XOR<permissionsCreateWithoutRoutesInput, permissionsUncheckedCreateWithoutRoutesInput>
    connectOrCreate?: permissionsCreateOrConnectWithoutRoutesInput
    upsert?: permissionsUpsertWithoutRoutesInput
    connect?: permissionsWhereUniqueInput
    update?: XOR<XOR<permissionsUpdateToOneWithWhereWithoutRoutesInput, permissionsUpdateWithoutRoutesInput>, permissionsUncheckedUpdateWithoutRoutesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type productsCreateWithoutBrandInput = {
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold?: boolean
    price: number
  }

  export type productsUncheckedCreateWithoutBrandInput = {
    id?: number
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold?: boolean
    price: number
  }

  export type productsCreateOrConnectWithoutBrandInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput>
  }

  export type productsCreateManyBrandInputEnvelope = {
    data: productsCreateManyBrandInput | productsCreateManyBrandInput[]
    skipDuplicates?: boolean
  }

  export type productsUpsertWithWhereUniqueWithoutBrandInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutBrandInput, productsUncheckedUpdateWithoutBrandInput>
    create: XOR<productsCreateWithoutBrandInput, productsUncheckedCreateWithoutBrandInput>
  }

  export type productsUpdateWithWhereUniqueWithoutBrandInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutBrandInput, productsUncheckedUpdateWithoutBrandInput>
  }

  export type productsUpdateManyWithWhereWithoutBrandInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutBrandInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: IntFilter<"products"> | number
    product_name?: StringFilter<"products"> | string
    img?: StringFilter<"products"> | string
    city?: StringFilter<"products"> | string
    release_year?: IntFilter<"products"> | number
    p_condition?: StringFilter<"products"> | string
    delivery_status?: StringFilter<"products"> | string
    isSold?: BoolFilter<"products"> | boolean
    price?: IntFilter<"products"> | number
    brand_id?: IntFilter<"products"> | number
  }

  export type brandsCreateWithoutProductsInput = {
    brand_name: string
  }

  export type brandsUncheckedCreateWithoutProductsInput = {
    id?: number
    brand_name: string
  }

  export type brandsCreateOrConnectWithoutProductsInput = {
    where: brandsWhereUniqueInput
    create: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
  }

  export type brandsUpsertWithoutProductsInput = {
    update: XOR<brandsUpdateWithoutProductsInput, brandsUncheckedUpdateWithoutProductsInput>
    create: XOR<brandsCreateWithoutProductsInput, brandsUncheckedCreateWithoutProductsInput>
    where?: brandsWhereInput
  }

  export type brandsUpdateToOneWithWhereWithoutProductsInput = {
    where?: brandsWhereInput
    data: XOR<brandsUpdateWithoutProductsInput, brandsUncheckedUpdateWithoutProductsInput>
  }

  export type brandsUpdateWithoutProductsInput = {
    brand_name?: StringFieldUpdateOperationsInput | string
  }

  export type brandsUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    brand_name?: StringFieldUpdateOperationsInput | string
  }

  export type groupPermissionCreateWithoutUserGroupInput = {
    permission: permissionsCreateNestedOneWithoutUserGroupsInput
  }

  export type groupPermissionUncheckedCreateWithoutUserGroupInput = {
    permissionId: number
  }

  export type groupPermissionCreateOrConnectWithoutUserGroupInput = {
    where: groupPermissionWhereUniqueInput
    create: XOR<groupPermissionCreateWithoutUserGroupInput, groupPermissionUncheckedCreateWithoutUserGroupInput>
  }

  export type groupPermissionCreateManyUserGroupInputEnvelope = {
    data: groupPermissionCreateManyUserGroupInput | groupPermissionCreateManyUserGroupInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutUserGroupInput = {
    phone: string
    pass: string
  }

  export type usersUncheckedCreateWithoutUserGroupInput = {
    id?: number
    phone: string
    pass: string
  }

  export type usersCreateOrConnectWithoutUserGroupInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUserGroupInput, usersUncheckedCreateWithoutUserGroupInput>
  }

  export type usersCreateManyUserGroupInputEnvelope = {
    data: usersCreateManyUserGroupInput | usersCreateManyUserGroupInput[]
    skipDuplicates?: boolean
  }

  export type groupPermissionUpsertWithWhereUniqueWithoutUserGroupInput = {
    where: groupPermissionWhereUniqueInput
    update: XOR<groupPermissionUpdateWithoutUserGroupInput, groupPermissionUncheckedUpdateWithoutUserGroupInput>
    create: XOR<groupPermissionCreateWithoutUserGroupInput, groupPermissionUncheckedCreateWithoutUserGroupInput>
  }

  export type groupPermissionUpdateWithWhereUniqueWithoutUserGroupInput = {
    where: groupPermissionWhereUniqueInput
    data: XOR<groupPermissionUpdateWithoutUserGroupInput, groupPermissionUncheckedUpdateWithoutUserGroupInput>
  }

  export type groupPermissionUpdateManyWithWhereWithoutUserGroupInput = {
    where: groupPermissionScalarWhereInput
    data: XOR<groupPermissionUpdateManyMutationInput, groupPermissionUncheckedUpdateManyWithoutUserGroupInput>
  }

  export type groupPermissionScalarWhereInput = {
    AND?: groupPermissionScalarWhereInput | groupPermissionScalarWhereInput[]
    OR?: groupPermissionScalarWhereInput[]
    NOT?: groupPermissionScalarWhereInput | groupPermissionScalarWhereInput[]
    userGroupId?: IntFilter<"groupPermission"> | number
    permissionId?: IntFilter<"groupPermission"> | number
  }

  export type usersUpsertWithWhereUniqueWithoutUserGroupInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutUserGroupInput, usersUncheckedUpdateWithoutUserGroupInput>
    create: XOR<usersCreateWithoutUserGroupInput, usersUncheckedCreateWithoutUserGroupInput>
  }

  export type usersUpdateWithWhereUniqueWithoutUserGroupInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutUserGroupInput, usersUncheckedUpdateWithoutUserGroupInput>
  }

  export type usersUpdateManyWithWhereWithoutUserGroupInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutUserGroupInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: IntFilter<"users"> | number
    phone?: StringFilter<"users"> | string
    pass?: StringFilter<"users"> | string
    userGroup_id?: IntFilter<"users"> | number
  }

  export type groupPermissionCreateWithoutPermissionInput = {
    userGroup: userGroupsCreateNestedOneWithoutPermissionsInput
  }

  export type groupPermissionUncheckedCreateWithoutPermissionInput = {
    userGroupId: number
  }

  export type groupPermissionCreateOrConnectWithoutPermissionInput = {
    where: groupPermissionWhereUniqueInput
    create: XOR<groupPermissionCreateWithoutPermissionInput, groupPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type groupPermissionCreateManyPermissionInputEnvelope = {
    data: groupPermissionCreateManyPermissionInput | groupPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type routePermissionCreateWithoutPermissionInput = {
    route: routesCreateNestedOneWithoutPermissionsInput
  }

  export type routePermissionUncheckedCreateWithoutPermissionInput = {
    routeId: number
  }

  export type routePermissionCreateOrConnectWithoutPermissionInput = {
    where: routePermissionWhereUniqueInput
    create: XOR<routePermissionCreateWithoutPermissionInput, routePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type routePermissionCreateManyPermissionInputEnvelope = {
    data: routePermissionCreateManyPermissionInput | routePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type groupPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: groupPermissionWhereUniqueInput
    update: XOR<groupPermissionUpdateWithoutPermissionInput, groupPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<groupPermissionCreateWithoutPermissionInput, groupPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type groupPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: groupPermissionWhereUniqueInput
    data: XOR<groupPermissionUpdateWithoutPermissionInput, groupPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type groupPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: groupPermissionScalarWhereInput
    data: XOR<groupPermissionUpdateManyMutationInput, groupPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type routePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: routePermissionWhereUniqueInput
    update: XOR<routePermissionUpdateWithoutPermissionInput, routePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<routePermissionCreateWithoutPermissionInput, routePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type routePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: routePermissionWhereUniqueInput
    data: XOR<routePermissionUpdateWithoutPermissionInput, routePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type routePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: routePermissionScalarWhereInput
    data: XOR<routePermissionUpdateManyMutationInput, routePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type routePermissionScalarWhereInput = {
    AND?: routePermissionScalarWhereInput | routePermissionScalarWhereInput[]
    OR?: routePermissionScalarWhereInput[]
    NOT?: routePermissionScalarWhereInput | routePermissionScalarWhereInput[]
    routeId?: IntFilter<"routePermission"> | number
    permissionId?: IntFilter<"routePermission"> | number
  }

  export type userGroupsCreateWithoutPermissionsInput = {
    group_name: string
    user?: usersCreateNestedManyWithoutUserGroupInput
  }

  export type userGroupsUncheckedCreateWithoutPermissionsInput = {
    id?: number
    group_name: string
    user?: usersUncheckedCreateNestedManyWithoutUserGroupInput
  }

  export type userGroupsCreateOrConnectWithoutPermissionsInput = {
    where: userGroupsWhereUniqueInput
    create: XOR<userGroupsCreateWithoutPermissionsInput, userGroupsUncheckedCreateWithoutPermissionsInput>
  }

  export type permissionsCreateWithoutUserGroupsInput = {
    permission_name: string
    routes?: routePermissionCreateNestedManyWithoutPermissionInput
  }

  export type permissionsUncheckedCreateWithoutUserGroupsInput = {
    id?: number
    permission_name: string
    routes?: routePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type permissionsCreateOrConnectWithoutUserGroupsInput = {
    where: permissionsWhereUniqueInput
    create: XOR<permissionsCreateWithoutUserGroupsInput, permissionsUncheckedCreateWithoutUserGroupsInput>
  }

  export type userGroupsUpsertWithoutPermissionsInput = {
    update: XOR<userGroupsUpdateWithoutPermissionsInput, userGroupsUncheckedUpdateWithoutPermissionsInput>
    create: XOR<userGroupsCreateWithoutPermissionsInput, userGroupsUncheckedCreateWithoutPermissionsInput>
    where?: userGroupsWhereInput
  }

  export type userGroupsUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: userGroupsWhereInput
    data: XOR<userGroupsUpdateWithoutPermissionsInput, userGroupsUncheckedUpdateWithoutPermissionsInput>
  }

  export type userGroupsUpdateWithoutPermissionsInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    user?: usersUpdateManyWithoutUserGroupNestedInput
  }

  export type userGroupsUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    user?: usersUncheckedUpdateManyWithoutUserGroupNestedInput
  }

  export type permissionsUpsertWithoutUserGroupsInput = {
    update: XOR<permissionsUpdateWithoutUserGroupsInput, permissionsUncheckedUpdateWithoutUserGroupsInput>
    create: XOR<permissionsCreateWithoutUserGroupsInput, permissionsUncheckedCreateWithoutUserGroupsInput>
    where?: permissionsWhereInput
  }

  export type permissionsUpdateToOneWithWhereWithoutUserGroupsInput = {
    where?: permissionsWhereInput
    data: XOR<permissionsUpdateWithoutUserGroupsInput, permissionsUncheckedUpdateWithoutUserGroupsInput>
  }

  export type permissionsUpdateWithoutUserGroupsInput = {
    permission_name?: StringFieldUpdateOperationsInput | string
    routes?: routePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type permissionsUncheckedUpdateWithoutUserGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    permission_name?: StringFieldUpdateOperationsInput | string
    routes?: routePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type userGroupsCreateWithoutUserInput = {
    group_name: string
    permissions?: groupPermissionCreateNestedManyWithoutUserGroupInput
  }

  export type userGroupsUncheckedCreateWithoutUserInput = {
    id?: number
    group_name: string
    permissions?: groupPermissionUncheckedCreateNestedManyWithoutUserGroupInput
  }

  export type userGroupsCreateOrConnectWithoutUserInput = {
    where: userGroupsWhereUniqueInput
    create: XOR<userGroupsCreateWithoutUserInput, userGroupsUncheckedCreateWithoutUserInput>
  }

  export type userGroupsUpsertWithoutUserInput = {
    update: XOR<userGroupsUpdateWithoutUserInput, userGroupsUncheckedUpdateWithoutUserInput>
    create: XOR<userGroupsCreateWithoutUserInput, userGroupsUncheckedCreateWithoutUserInput>
    where?: userGroupsWhereInput
  }

  export type userGroupsUpdateToOneWithWhereWithoutUserInput = {
    where?: userGroupsWhereInput
    data: XOR<userGroupsUpdateWithoutUserInput, userGroupsUncheckedUpdateWithoutUserInput>
  }

  export type userGroupsUpdateWithoutUserInput = {
    group_name?: StringFieldUpdateOperationsInput | string
    permissions?: groupPermissionUpdateManyWithoutUserGroupNestedInput
  }

  export type userGroupsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    group_name?: StringFieldUpdateOperationsInput | string
    permissions?: groupPermissionUncheckedUpdateManyWithoutUserGroupNestedInput
  }

  export type routePermissionCreateWithoutRouteInput = {
    permission: permissionsCreateNestedOneWithoutRoutesInput
  }

  export type routePermissionUncheckedCreateWithoutRouteInput = {
    permissionId: number
  }

  export type routePermissionCreateOrConnectWithoutRouteInput = {
    where: routePermissionWhereUniqueInput
    create: XOR<routePermissionCreateWithoutRouteInput, routePermissionUncheckedCreateWithoutRouteInput>
  }

  export type routePermissionCreateManyRouteInputEnvelope = {
    data: routePermissionCreateManyRouteInput | routePermissionCreateManyRouteInput[]
    skipDuplicates?: boolean
  }

  export type routePermissionUpsertWithWhereUniqueWithoutRouteInput = {
    where: routePermissionWhereUniqueInput
    update: XOR<routePermissionUpdateWithoutRouteInput, routePermissionUncheckedUpdateWithoutRouteInput>
    create: XOR<routePermissionCreateWithoutRouteInput, routePermissionUncheckedCreateWithoutRouteInput>
  }

  export type routePermissionUpdateWithWhereUniqueWithoutRouteInput = {
    where: routePermissionWhereUniqueInput
    data: XOR<routePermissionUpdateWithoutRouteInput, routePermissionUncheckedUpdateWithoutRouteInput>
  }

  export type routePermissionUpdateManyWithWhereWithoutRouteInput = {
    where: routePermissionScalarWhereInput
    data: XOR<routePermissionUpdateManyMutationInput, routePermissionUncheckedUpdateManyWithoutRouteInput>
  }

  export type routesCreateWithoutPermissionsInput = {
    route_name: string
  }

  export type routesUncheckedCreateWithoutPermissionsInput = {
    id?: number
    route_name: string
  }

  export type routesCreateOrConnectWithoutPermissionsInput = {
    where: routesWhereUniqueInput
    create: XOR<routesCreateWithoutPermissionsInput, routesUncheckedCreateWithoutPermissionsInput>
  }

  export type permissionsCreateWithoutRoutesInput = {
    permission_name: string
    userGroups?: groupPermissionCreateNestedManyWithoutPermissionInput
  }

  export type permissionsUncheckedCreateWithoutRoutesInput = {
    id?: number
    permission_name: string
    userGroups?: groupPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type permissionsCreateOrConnectWithoutRoutesInput = {
    where: permissionsWhereUniqueInput
    create: XOR<permissionsCreateWithoutRoutesInput, permissionsUncheckedCreateWithoutRoutesInput>
  }

  export type routesUpsertWithoutPermissionsInput = {
    update: XOR<routesUpdateWithoutPermissionsInput, routesUncheckedUpdateWithoutPermissionsInput>
    create: XOR<routesCreateWithoutPermissionsInput, routesUncheckedCreateWithoutPermissionsInput>
    where?: routesWhereInput
  }

  export type routesUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: routesWhereInput
    data: XOR<routesUpdateWithoutPermissionsInput, routesUncheckedUpdateWithoutPermissionsInput>
  }

  export type routesUpdateWithoutPermissionsInput = {
    route_name?: StringFieldUpdateOperationsInput | string
  }

  export type routesUncheckedUpdateWithoutPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    route_name?: StringFieldUpdateOperationsInput | string
  }

  export type permissionsUpsertWithoutRoutesInput = {
    update: XOR<permissionsUpdateWithoutRoutesInput, permissionsUncheckedUpdateWithoutRoutesInput>
    create: XOR<permissionsCreateWithoutRoutesInput, permissionsUncheckedCreateWithoutRoutesInput>
    where?: permissionsWhereInput
  }

  export type permissionsUpdateToOneWithWhereWithoutRoutesInput = {
    where?: permissionsWhereInput
    data: XOR<permissionsUpdateWithoutRoutesInput, permissionsUncheckedUpdateWithoutRoutesInput>
  }

  export type permissionsUpdateWithoutRoutesInput = {
    permission_name?: StringFieldUpdateOperationsInput | string
    userGroups?: groupPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type permissionsUncheckedUpdateWithoutRoutesInput = {
    id?: IntFieldUpdateOperationsInput | number
    permission_name?: StringFieldUpdateOperationsInput | string
    userGroups?: groupPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type productsCreateManyBrandInput = {
    id?: number
    product_name: string
    img: string
    city: string
    release_year: number
    p_condition: string
    delivery_status: string
    isSold?: boolean
    price: number
  }

  export type productsUpdateWithoutBrandInput = {
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productsUncheckedUpdateWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
  }

  export type productsUncheckedUpdateManyWithoutBrandInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_name?: StringFieldUpdateOperationsInput | string
    img?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    release_year?: IntFieldUpdateOperationsInput | number
    p_condition?: StringFieldUpdateOperationsInput | string
    delivery_status?: StringFieldUpdateOperationsInput | string
    isSold?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
  }

  export type groupPermissionCreateManyUserGroupInput = {
    permissionId: number
  }

  export type usersCreateManyUserGroupInput = {
    id?: number
    phone: string
    pass: string
  }

  export type groupPermissionUpdateWithoutUserGroupInput = {
    permission?: permissionsUpdateOneRequiredWithoutUserGroupsNestedInput
  }

  export type groupPermissionUncheckedUpdateWithoutUserGroupInput = {
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type groupPermissionUncheckedUpdateManyWithoutUserGroupInput = {
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type usersUpdateWithoutUserGroupInput = {
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateWithoutUserGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyWithoutUserGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    phone?: StringFieldUpdateOperationsInput | string
    pass?: StringFieldUpdateOperationsInput | string
  }

  export type groupPermissionCreateManyPermissionInput = {
    userGroupId: number
  }

  export type routePermissionCreateManyPermissionInput = {
    routeId: number
  }

  export type groupPermissionUpdateWithoutPermissionInput = {
    userGroup?: userGroupsUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type groupPermissionUncheckedUpdateWithoutPermissionInput = {
    userGroupId?: IntFieldUpdateOperationsInput | number
  }

  export type groupPermissionUncheckedUpdateManyWithoutPermissionInput = {
    userGroupId?: IntFieldUpdateOperationsInput | number
  }

  export type routePermissionUpdateWithoutPermissionInput = {
    route?: routesUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type routePermissionUncheckedUpdateWithoutPermissionInput = {
    routeId?: IntFieldUpdateOperationsInput | number
  }

  export type routePermissionUncheckedUpdateManyWithoutPermissionInput = {
    routeId?: IntFieldUpdateOperationsInput | number
  }

  export type routePermissionCreateManyRouteInput = {
    permissionId: number
  }

  export type routePermissionUpdateWithoutRouteInput = {
    permission?: permissionsUpdateOneRequiredWithoutRoutesNestedInput
  }

  export type routePermissionUncheckedUpdateWithoutRouteInput = {
    permissionId?: IntFieldUpdateOperationsInput | number
  }

  export type routePermissionUncheckedUpdateManyWithoutRouteInput = {
    permissionId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BrandsCountOutputTypeDefaultArgs instead
     */
    export type BrandsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BrandsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserGroupsCountOutputTypeDefaultArgs instead
     */
    export type UserGroupsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserGroupsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionsCountOutputTypeDefaultArgs instead
     */
    export type PermissionsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoutesCountOutputTypeDefaultArgs instead
     */
    export type RoutesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoutesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use brandsDefaultArgs instead
     */
    export type brandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = brandsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productsDefaultArgs instead
     */
    export type productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = productsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userGroupsDefaultArgs instead
     */
    export type userGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userGroupsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use permissionsDefaultArgs instead
     */
    export type permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = permissionsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use groupPermissionDefaultArgs instead
     */
    export type groupPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = groupPermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use routesDefaultArgs instead
     */
    export type routesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = routesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use routePermissionDefaultArgs instead
     */
    export type routePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = routePermissionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}